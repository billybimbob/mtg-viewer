@using System
@using System.Linq
@using System.Linq.Expressions

@namespace MTGViewer.Components
@implements IDisposable

@inject IDbContextFactory<CardDbContext> DbFactory
@inject SymbolFormatter MtgSymbols
@inject ILogger<Library> Logger


<h1>Card Collection</h1>

<div class="d-flex">
    @if (IsSignedIn)
    {
        <a class="btn btn-secondary mr-1" href="Cards/Create" role="button">Add Card</a>
    }

    <a class="btn btn-secondary mr-1" href="Treasury/" role="button">Treasury</a>

    <button class="btn btn-secondary mr-1" type="button" @onclick="RefreshCardsAsync">Refresh </button>
</div>

<div class="form-row align-items-center my-3">
    <div class="col-3">
        <input class="form-control" placeholder="Name" @onchange="SearchName" />
    </div>

    <div class="col-auto btn-group" role="group" aria-label="Color Buttons">
        @foreach (var (color, symbol) in Color.Symbols)
        {
            var active = _colorFilter.Contains(color) ? "active" : "";

            <button title="@color filter"
                    type="button"
                    class="btn btn-outline-secondary border-0 rounded @active"
                    @onclick="() => FilterColor(color)">
                <i class="ms ms-@symbol.ToLower() ms-cost"></i>
            </button>
        }
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th scope="col"
                @onclick="() => ReorderCards(c => c.Name)" 
                class="clickable btn-link @BoldIfActive(c => c.Name)">
                @Entities.DisplayName((Card c) => c.Name)
            </th>

            <th scope="col" 
                @onclick="() => ReorderCards(c => c.ManaCost)" 
                class="clickable btn-link @BoldIfActive(c => c.ManaCost)">
                @Entities.DisplayName((Card c) => c.ManaCost)
            </th>

            <th scope="col"
                @onclick="() => ReorderCards(c => c.SetName)" 
                class="clickable btn-link @BoldIfActive(c => c.SetName)">
                @Entities.DisplayName((Card c) => c.SetName)
            </th>

            <th scope="col"
                @onclick="() => ReorderCards(c => c.Rarity)" 
                class="clickable btn-link @BoldIfActive(c => c.Rarity)">
                @Entities.DisplayName((Card c) => c.Rarity)
            </th>

            <th scope="col" 
                @onclick="() => ReorderCards(c => c.Amounts)" 
                class="clickable btn-link @BoldIfActive(c => c.Amounts)">
                Total Amount
            </th>

            <th scope="col"></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in Cards)
        {
            <tr>
                <td> <HoverCard Card="@((CardPreview) card)"/> </td>

                <td> @(MtgSymbols.Format(card.ManaCost).ToMarkupString()) </td>
                <td> @card.SetName </td>
                <td> @card.Rarity </td>
                <td> @CardTotal(card) </td>

                <td>
                    @if (IsSignedIn)
                    {
                        <a title="Suggest @card.Name"
                           href="/Transfers/Suggest/@card.Id"
                           class="btn btn-secondary"
                           role="button">
                           Suggest </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@if (Cards.Pages.HasMultiple)
{
    var prevDisabled = Cards.Pages.HasPrevious ? "" : "disabled";
    var nextDisabled = Cards.Pages.HasNext ? "" : "disabled";

    <nav aria-label="Card Result Pages">
        <ul class="pagination justify-content-center">

            <li class="page-item @prevDisabled">
                <button class="page-link" disabled="@(!Cards.Pages.HasPrevious)"
                    @onclick="() => ApplyFilters(Cards.Pages.Current - 1)">
                    &laquo;
                </button>
            </li>

            @for (int i = 0; i < Cards.Pages.Total; ++i)
            {
                var pageIndex = i;
                var activePage = pageIndex == Cards.Pages.Current ? "active" : "";

                <li class="page-item @activePage">
                    <button class="page-link" @onclick="() => ApplyFilters(pageIndex)">
                        @(pageIndex + 1)
                        <span class="sr-only">(current)</span>
                    </button>
                </li>
            }

            <li class="page-item @nextDisabled">
                <button class="page-link" disabled="@(!Cards.Pages.HasNext)"
                    @onclick="() => ApplyFilters(Cards.Pages.Current + 1)">
                    &raquo;
                </button>
            </li>

        </ul>
    </nav>
}


@code {

    [Parameter]
    public bool IsSignedIn { get; set; } = false;

    [Parameter]
    public int PageSize { get; set; }

    private PagedList<Card> Cards { get; set; }


    private bool _isBusy;
    private readonly CancellationTokenSource _cancel = new();

    private IReadOnlyList<Card> _dbCards;
    private IReadOnlyDictionary<string, int> _cardAmounts;

    private readonly HashSet<string> _colorFilter = new();
    private string _searchName;

    private string _orderProperty;
    private bool _isReversed;


    private int CardTotal(Card card) =>
        _cardAmounts.GetValueOrDefault(card.Id);


    private string BoldIfActive<T>(Expression<Func<Card, T>> property) =>
        _orderProperty == null || MemberName(property) != _orderProperty
            ? ""
            : "font-weight-bold";


    private string MemberName<T>(Expression<Func<Card, T>> property) =>
        (property.Body as MemberExpression)?.Member.Name;



    protected override Task OnInitializedAsync()
    {
        return FetchCardsAsync();
    }


    protected override void OnParametersSet()
    {
        _colorFilter.Clear();
        _orderProperty = null;
        _searchName = string.Empty;

        ApplyFilters();
    }


    public void Dispose()
    {
        _cancel.Cancel();
        _cancel.Dispose();
    }


    private async Task FetchCardsAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await using var dbContext = DbFactory.CreateDbContext();

            _dbCards = await dbContext.Cards
                .Include(c => c.Colors)
                .ToListAsync(_cancel.Token); // unbounded, keep eye on

            _cardAmounts = await dbContext.Amounts
                .GroupBy( ca => ca.CardId,
                    (CardId, cas) =>
                        new { CardId, Total = cas.Sum(ca => ca.NumCopies) })
                .ToDictionaryAsync(
                    ct => ct.CardId, ct => ct.Total, _cancel.Token);
        }

        catch (OperationCanceledException ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    private void ApplyFilters(int pageIndex = 0)
    {
        if (pageIndex < 0 
            || Cards?.Pages.Total is int totalPages 
                && totalPages > 0 
                && pageIndex >= totalPages)
        {
            return;
        }

        _orderProperty ??= nameof(Card.Name);

        Cards = CardsFiltered().ToPagedList(PageSize, pageIndex);
    }


    private IEnumerable<Card> CardsFiltered()
    {
        var cards = _dbCards.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_searchName))
        {
            cards = cards.Where(c => 
                c.Name.ToLower().Contains(_searchName));
        }

        if (_colorFilter.Any())
        {
            cards = cards.Where(c => c.Colors
                .IntersectBy(_colorFilter, color => color.Name.ToLower())
                .Any());
        }

        return CardsOrdered(cards);
    }


    private IOrderedEnumerable<Card> CardsOrdered(IEnumerable<Card> cards)
    {
        var isAscending = _orderProperty switch
        {
            nameof(Card.ManaCost) => true,
            nameof(Card.SetName) => true,
            nameof(Card.Rarity) => false,
            nameof(Card.Amounts) => false,
            _ => true
        };

        IOrderedEnumerable<Card> PrimaryOrder<T>(
            Func<Card, T> property, IComparer<T> comparer = null) =>
            isAscending ^ _isReversed
                ? cards.OrderBy(property, comparer)
                : cards.OrderByDescending(property, comparer);

        return _orderProperty switch
        {
            nameof(Card.ManaCost) => 
                PrimaryOrder(c => c.Cmc)
                    .ThenBy(c => c.Name)
                    .ThenBy(c => c.SetName),

            nameof(Card.SetName) =>
                PrimaryOrder(c => c.SetName)
                    .ThenBy(c => c.Name),

            nameof(Card.Rarity) => 
                PrimaryOrder(c => c.Rarity, new RarityComparer())
                    .ThenBy(c => c.Name)
                    .ThenBy(c => c.SetName),

            nameof(Card.Amounts) => 
                PrimaryOrder(c => _cardAmounts.GetValueOrDefault(c.Id))
                    .ThenBy(c => c.Name)
                    .ThenBy(c => c.SetName),

            _ => PrimaryOrder(c => c.Name)
                    .ThenBy(c => c.SetName)
        };
    }



    private void FilterColor(string color)
    {
        if (_colorFilter.Contains(color))
        {
            _colorFilter.Remove(color);
        }
        else
        {
            _colorFilter.Add(color);
        }

        ApplyFilters();
    }


    private void SearchName(ChangeEventArgs eventArgs)
    {
        _searchName = eventArgs.Value?.ToString();
        
        ApplyFilters();
    }


    private void ReorderCards<T>(Expression<Func<Card, T>> property)
    {
        var newOrder = MemberName(property);
        var oldOrder = _orderProperty;

        if (newOrder is null)
        {
            return;
        }

        _isReversed = newOrder == oldOrder && !_isReversed;
        _orderProperty = newOrder;

        ApplyFilters();
    }


    private async Task RefreshCardsAsync()
    {
        await FetchCardsAsync();

        if (!_cancel.IsCancellationRequested)
        {
            ApplyFilters(); // keep current filters
        }
    }
}