@using System.Linq
@using MTGViewer.Data

@namespace MTGViewer.Components

@inject IDbContextFactory<CardDbContext> DbFactory


<h1>Card Collection</h1>
<hr />

<div class="mb-3">
    <a class="btn btn-secondary" href="Cards/Create">Add Card</a>
    <a class="btn btn-secondary" href="Boxes/">Shared Collection</a>
</div>

<div class="mb-3">
    @* <div class="input-group my-3">
        <span class="input-group-text">Name:</span> *@
    <input class="formcontrol" placeholder="Name" @onchange="SearchName" />
    @* </div> *@

    <div class="btn-group" role="group" aria-label="Color Buttons">
        @foreach (var color in Data.Color.COLORS)
        {
            var active = _colorFilter.Contains(color.Key) ? "active" : "";

            <button title="@color.Key Filter"
                    type="button"
                    class="btn btn-outline-secondary border-0 rounded @active"
                    @onclick="() => FilterColor(color.Key)">
                <span class="ms ms-@color.Value ms-cost"> </span>
            </button>
        }
    </div>

    <button class="btn btn-secondary" @onclick="FetchCardsAsync">Refresh</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Rarity</th>
            <th>Total Amount</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in _viewCards)
        {
            <tr>
                <td>
                    <a title="Details @card.Name"
                       href="Cards/Details?id=@card.Id"
                       class="fw-bold">
                       @card.Name
                    </a>
                </td>
                <td>
                    @foreach (var cost in card.GetManaSymbols())
                    {
                        <span class="m-1 ms ms-@cost ms-cost"></span>
                    }
                </td>
                <td>@card.SetName</td>
                <td>@card.Rarity</td>
                <td>@card.Amounts.Sum(ca => ca.Amount)</td>

                <td>
                    @if (IsSignedIn)
                    {
                        <a title="Suggest @card.Name"
                           href="Transfers/Suggest/@card.Id"
                           class="btn btn-secondary">
                           Suggest </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code {

    [Parameter]
    public bool IsSignedIn { get; set; } = false;

    private bool _busy;
    private IEnumerable<Card> _dbCards;
    private IEnumerable<Card> _viewCards;

    private string _searchName;
    private readonly ISet<string> _colorFilter = new HashSet<string>();


    protected override async Task OnInitializedAsync()
    {
        if (_busy)
        {
            return;    
        }

        await FetchCardsAsync();
    }

    private async Task FetchCardsAsync()
    {
        _busy = true;
        
        using var context = DbFactory.CreateDbContext();

        _dbCards = await context.Cards
            .Include(c => c.Colors)
            .Include(c => c.Amounts)
            // .ThenInclude(a => a.Location)
            .OrderBy(c => c.Name)
                .ThenBy(c => c.SetName)
            .AsSplitQuery()
            .AsNoTracking()
            .ToListAsync();

        _viewCards = _dbCards;

        _busy = false;
    }


    private void ApplyFilters()
    {
        var query = _dbCards;

        if (!string.IsNullOrWhiteSpace(_searchName))
        {
            query = query
                .Where(c => c.Name.ToLower().Contains(_searchName));
        }

        if (_colorFilter.Any())
        {
            query = query
                .Where(card => {
                    var colors = card.Colors.Select(color => color.Name.ToLower());
                    return _colorFilter.Overlaps(colors);
                });
        }

        _viewCards = query.ToList();
    }

    private void FilterColor(string color)
    {
        if (_colorFilter.Contains(color))
        {
            _colorFilter.Remove(color);
        }
        else
        {
            _colorFilter.Add(color);
        }

        ApplyFilters();
    }

    private void SearchName(ChangeEventArgs eventArgs)
    {
        _searchName = eventArgs.Value?.ToString();
        ApplyFilters();
    }
}