@using MTGViewer.Data
@using MTGViewer.Data.Concurrency
@using MTGViewer.Data.Internal

@namespace MTGViewer.Components
@implements IAsyncDisposable

@inject IDbContextFactory<CardDbContext> DbFactory
@inject ILogger<DeckBuilder> Logger


<h1>@_deck.Name Builder</h1>

<button title="Save Deck"
        type="button"
        class="btn btn-secondary mb-3"
        disabled="@HasNoChanges()"
        @onclick="CommitChangesAsync">
    Save Changes
</button>

<SavePrompt @bind-Result="_result">
    <SuccessMessage>
        Save was succesful, and values have been updated
    </SuccessMessage>
    <ErrorMessage>
        <p>There are conflicts while trying to save, and values have been updated. </p>
        <hr>
        <p>Save again to confirm</p>
    </ErrorMessage>
</SavePrompt>


<h2>Available Cards</h2>

<table class="table">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Rarity</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in SortedCards)
        {
            <tr>
                <td class="fw-bold">@card.Name</td>

                <td>
                    @foreach (var cost in card.GetManaSymbols())
                    {
                        <span class="m-1 ms ms-@cost ms-cost"></span>
                    }
                </td>

                <td>@card.SetName</td>
                <td>@card.Rarity</td>
                <td>
                    <button title="Add @card.Name"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded"
                            @onclick="() => AddCardToDeck(card)">
                        Add Card
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


<input @bind="_deck.Name" class="form-control form-control-lg border-0"/>

<table class="table mt-2">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Deck Amount</th>
            <th>Requests</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in DeckCards)
        {
            var group = _deckCards[card.Id];
            <tr>
                <td class="fw-bold">@card.Name</td>

                <td>
                    @foreach (var cost in card.GetManaSymbols())
                    {
                        <span class="m-1 ms ms-@cost ms-cost"></span>
                    }
                </td>

                <td>@card.SetName</td>

                <td>@((group.Actual?.Amount ?? 0) - (group.Return?.Amount ?? 0))</td>
                <td>@(group.Take?.Amount ?? 0)</td>

                <td>
                    <button title="Remove @card.Name"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded"
                            @onclick="() => RemoveCardFromDeck(card)">
                        Remove Card
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public int DeckId { get; set; } = default;


    private bool _busy;
    private SaveResult _result;
    private CardDbContext _dbContext;

    private UserRef _user;
    private Deck _deck;
    private SortedList<string, List<Card>> _dbCards;
    private IDictionary<string, RequestGroup> _deckCards;


    private bool HasNoChanges() =>
        !_dbContext.ChangeTracker.HasChanges();


    private IEnumerable<Card> SortedCards => 
        _dbCards.Values.SelectMany(cg => cg);

    private IEnumerable<Card> DeckCards =>
        SortedCards.Where(c =>
            _deckCards.TryGetValue(c.Id, out var cardGroup)
                && cardGroup.Amount > 0);

    private IQueryable<Deck> DeckQuery =>
        _dbContext.Decks
            .Where(d => d.Id == DeckId)
            .Include(d => d.Cards)
            .Include(d => d.ExchangesTo
                .Where(ex => !ex.IsTrade))
            .Include(d => d.ExchangesFrom
                .Where(ex => !ex.IsTrade))
            .AsSplitQuery();



    protected override async Task OnInitializedAsync()
    {
        if (_busy)
        {
            return;
        }

        _busy = true;
        try
        {
            _dbContext = DbFactory.CreateDbContext();

            var cards = await _dbContext.Cards.ToListAsync();

            var nameGroups = cards
                .GroupBy(c => c.Name)
                .ToDictionary(g => g.Key, g => g.ToList());

            _dbCards = new(nameGroups);
        }
        finally
        {
            _busy = false;
        }

        await base.OnInitializedAsync();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (_busy)
        {
            return;
        }

        _busy = true;
        try
        {
            _user = await _dbContext.Users.FindAsync(UserId);

            _deck = await GetOrCreateDeckAsync();

            _deckCards = GetDeckCardGroups(_deck)
                .ToDictionary(cg => cg.CardId);
        }
        finally
        {
            _busy = false;
        }

        await base.OnParametersSetAsync();
    }


    private async Task<Deck> GetOrCreateDeckAsync()
    {
        if (DeckId != default)
        {
            return await DeckQuery.SingleAsync();
        }

        var userDeckCount = await _dbContext.Decks
            .Where(l => l.Owner.Id == _user.Id)
            .CountAsync();

        var newLoc = new Deck($"Deck #{userDeckCount + 1}")
        {
            Owner = _user
        };

        _dbContext.Decks.Attach(newLoc);

        return newLoc;
    }


    private IEnumerable<RequestGroup> GetDeckCardGroups(Deck deck)
    {
        var amountsById = deck.Cards
            .ToDictionary(ca => ca.CardId);

        var requestsById = deck.GetAllExchanges()
            .Where(ex => !ex.IsTrade)
            .ToLookup(ex => ex.CardId);

        var cardIds = amountsById
            .Select(g => g.Key)
            .Union(requestsById
                . Select(g => g.Key));

        return cardIds.Select(cid =>
            new RequestGroup(amountsById[cid], requestsById[cid]));
    }


    public async ValueTask DisposeAsync()
    {
        if (_dbContext is not null)
        {
            await _dbContext.DisposeAsync();
        }
    }


    private void AddCardToDeck(Card card)
    {
        _result = SaveResult.None;

        bool hasGroup = _deckCards.TryGetValue(card.Id, out var deckGroup);

        if (hasGroup && deckGroup.Return?.Amount > 0)
        {
            deckGroup.Return.Amount -= 1;
            return;
        }

        if (!hasGroup || deckGroup.Take is null)
        {
            var takeAmount = new Exchange
            {
                Card = card,
                To = _deck,
                Amount = 0,
            };

            _dbContext.Exchanges.Add(takeAmount);

            if (hasGroup)
            {
                deckGroup.Take = takeAmount;
            }
            else
            {
                deckGroup = new(takeAmount);
                _deckCards.Add(card.Id, deckGroup);
            }
        }

        deckGroup.Take.Amount += 1;
    }


    private void RemoveCardFromDeck(Card card)
    {
        _result = SaveResult.None;

        if (!_deckCards.TryGetValue(card.Id, out var deckGroup))
        {
            Logger.LogError($"card {card.Id} is not in the deck");
            return;
        }

        if (deckGroup.Take?.Amount > 0)
        {
            deckGroup.Take.Amount -= 1;
            return;
        }

        var actualRemain = (deckGroup.Actual?.Amount ?? 0)
            - (deckGroup.Return?.Amount ?? 0);

        if (actualRemain == 0)
        {
            Logger.LogError($"there are no more of {card.Id} to remove");
            return;
        }

        if (deckGroup.Return is null)
        {
            var returnAmount = new Exchange
            {
                Card = deckGroup.Card,
                From = _deck,
                Amount = 0
            };

            deckGroup.Return = returnAmount;
            _dbContext.Exchanges.Attach(returnAmount);
        }

        deckGroup.Return.Amount += 1;
    }



    private async Task CommitChangesAsync()
    {
        if (_busy)
        {
            return;
        }

        _busy = true;
        PrepareChanges();

        try
        {
            await _dbContext.SaveChangesAsync();
            _result = SaveResult.Success;

            Logger.LogInformation($"successfully updated");
        }
        catch (DbUpdateConcurrencyException ex)
        {
            _result = SaveResult.Error;
            await UpdateDeckAsync(ex);
        }
        finally
        {
            _busy = false;
        }
    }


    private void PrepareChanges()
    {
        var exchanges = _deck.GetAllExchanges().Where(ex => !ex.IsTrade);

        foreach (var exchange in exchanges)
        {
            if (exchange.Amount == 0)
            {
                _dbContext.Exchanges.Remove(exchange);
            }
            // detaches when saved after a remove
            else if (_dbContext.Entry(exchange).State == EntityState.Detached)
            {
                _dbContext.Exchanges.Add(exchange);
            }
        }

        var deckEntry = _dbContext.Entry(_deck);

        if (deckEntry.State == EntityState.Unchanged)
        {
            deckEntry.State = EntityState.Modified;
        }
    }


    private async Task UpdateDeckAsync(DbUpdateConcurrencyException ex)
    {
        if (HasNoDeckConflicts(ex))
        {
            return;
        }

        var dbDeck = await DeckQuery
            .AsNoTracking()
            .SingleOrDefaultAsync();

        if (dbDeck == default)
        {
            _dbContext.Decks.Add(_deck);
            return;
        }

        MergeDeckRemoves(dbDeck);
        TrackNewDeckCards(dbDeck);

        MergeDeckCardConflicts(dbDeck);
        CapDeletes();

        _dbContext.MatchToken(_deck, dbDeck);
    }


    private bool HasNoDeckConflicts(DbUpdateConcurrencyException ex)
    {
        var deckConflict = ex.Entries<Location>()
            .SingleOrDefault();

        if (deckConflict is not null && deckConflict.Entity.Id == _deck.Id)
        {
            return false;
        }

        var conflictsInDeck = ex.Entries<CardAmount>()
            .Select(ca => ca.Entity.CardId)
            .Intersect(_deckCards.Keys);

        return !conflictsInDeck.Any();
    }


    private void MergeDeckRemoves(Deck dbDeck)
    {
        var removedCards = _deck.Cards
            .GroupJoin( dbDeck.Cards,
                local => local.CardId, db => db.CardId,
                (local, dbs) =>
                    (local, noDb: !dbs.Any()))
            .Where(ln => ln.noDb)
            .Select(ln => ln.local);

        foreach(var removedCard in removedCards)
        {
            removedCard.Amount = 0;
            _dbContext.Amounts.Remove(removedCard);
        }


        var localRequests = _deck.GetAllExchanges().Where(ex => !ex.IsTrade);
        var dbRequests = dbDeck.GetAllExchanges().Where(ex => !ex.IsTrade);

        var removedReqeusts = localRequests
            .GroupJoin( dbRequests,
                rq => (rq.CardId, rq.ToId, rq.FromId),
                db => (db.CardId, db.ToId, db.FromId),
                (local, dbs) =>
                    (local, noDb: !dbs.Any()))
            .Where(ln => ln.noDb)
            .Select(ln => ln.local);

        foreach (var removedRequest in removedReqeusts)
        {
            if (_dbContext.Entry(removedRequest).State == EntityState.Unchanged)
            {
                removedRequest.Amount = 0;
                _dbContext.Exchanges.Remove(removedRequest);
            }
            else
            {
                _dbContext.Exchanges.Add(removedRequest);
            }
        }
    }


    private void MergeDeckCardConflicts(Deck dbDeck)
    {
        foreach (var dbCard in dbDeck.Cards)
        {
            if (!_deckCards.TryGetValue(dbCard.CardId, out var localGroup)
                || localGroup.Actual is null)
            {
                continue;
            }

            var localCard = localGroup.Actual;

            if (_dbContext.Entry(localCard).State == EntityState.Unchanged)
            {
                localCard.Amount = dbCard.Amount;
            }

            _dbContext.MatchToken(localCard, dbCard);
        }

        var dbTakes = dbDeck.ExchangesTo.Where(ex => !ex.IsTrade);

        foreach (var dbTake in dbTakes)
        {
            if (!_deckCards.TryGetValue(dbTake.CardId, out var localGroup)
                || localGroup.Take is null)
            {
                continue;
            }

            var localTake = localGroup.Take;

            if (_dbContext.Entry(localTake).State == EntityState.Unchanged)
            {
                localTake.Amount = dbTake.Amount;
            }

            _dbContext.MatchToken(localTake, dbTake);
        }

        var dbReturns = dbDeck.ExchangesFrom.Where(ex => !ex.IsTrade);

        foreach (var dbReturn in dbReturns)
        {
            if (!_deckCards.TryGetValue(dbReturn.CardId, out var localGroup)
                || localGroup.Return is null)
            {
                continue;
            }

            var localReturn = localGroup.Return;

            if (_dbContext.Entry(localReturn).State == EntityState.Unchanged)
            {
                localReturn.Amount = dbReturn.Amount;
            }

            _dbContext.MatchToken(localReturn, dbReturn);
        }
    }


    private void TrackNewDeckCards(Deck dbDeck)
    {
        foreach (var dbCard in dbDeck.Cards)
        {
            var hasGroup = _deckCards.TryGetValue(dbCard.CardId, out var localGroup);

            if (hasGroup && localGroup.Actual is not null)
            {
                continue;
            }

            if (hasGroup)
            {
                localGroup.Actual = dbCard;
            }
            else
            {
                localGroup = new(dbCard);
                _deckCards.Add(dbCard.CardId, localGroup);
            }

            _dbContext.Amounts.Attach(dbCard);
        }

        var dbTakes = dbDeck.ExchangesTo.Where(ex => !ex.IsTrade);

        foreach (var dbTake in dbTakes)
        {
            var hasGroup = _deckCards.TryGetValue(dbTake.CardId, out var localGroup);

            if (hasGroup && localGroup.Take is not null)
            {
                continue;
            }

            if (hasGroup)
            {
                localGroup.Take = dbTake;
            }
            else
            {
                localGroup = new(dbTake);
                _deckCards.Add(dbTake.CardId, localGroup);
            }

            _dbContext.Exchanges.Attach(dbTake);
        }

        var dbReturns = dbDeck.ExchangesFrom.Where(ex => !ex.IsTrade);

        foreach (var dbReturn in dbReturns)
        {
            var hasGroup = _deckCards.TryGetValue(dbReturn.CardId, out var localGroup);

            if (hasGroup && localGroup.Return is not null)
            {
                continue;
            }

            if (hasGroup)
            {
                localGroup.Return = dbReturn;
            }
            else
            {
                localGroup = new(dbReturn);
                _deckCards.Add(dbReturn.CardId, localGroup);
            }

            _dbContext.Exchanges.Attach(dbReturn);
        }
    }


    private void CapDeletes()
    {
        foreach(var cardGroup in _deckCards.Values)
        {
            if (cardGroup.Return is null)
            {
                continue;
            }

            var currentReturn = cardGroup.Return.Amount;
            var capAmount = cardGroup.Actual?.Amount ?? currentReturn;

            cardGroup.Return.Amount = Math.Min(currentReturn, capAmount);
        }
    }
}