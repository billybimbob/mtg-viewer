@using MTGViewer.Data

@namespace MTGViewer.Components
@implements IDisposable

@inject IDbContextFactory<CardDbContext> DbFactory
@inject ILogger<Home> Logger;


<h1 class="text-center display-4">Welcome to the card database!</h1>

<div class="pt-4">
    <a href="/Cards" title="Card Collection">
        <h3>Cards from our collection!</h3>
    </a>

    <div class="row">
        @foreach (var card in _randomCards)
        {
            <a href="/Cards/Details/@card.Id" class="col-md-3 col-6"
                title="@card.Name Details"
                aria-label="@card.Id details">

                <img alt="@card.Id image" 
                    class="w-100 img-fluid rounded" 
                    src="@card.ImageUrl.WithHttps()">
            </a>
        }
    </div>
</div>

<div class="pt-5">
    <a href="/Treasury/History" title="Treasury History">
        <h3>Recent Shared Collection Changes</h3>
    </a>

    <ul class="list-group list-group-flush">
        @foreach (var transaction in _recentChanges)
        {
            var changes = transaction.Changes;
            var adds = changes.Where(c => c.To is Box);
            var removes = changes.Where(c => c.From is Box);

            var anyAdds = adds.Any();
            var anyRemoves = removes.Any();
            var both = anyAdds && anyRemoves;

            <li class="list-group-item d-flex justify-content-between">
                <p class="m-0">
                    @if (anyAdds)
                    {
                        <strong> Added </strong> @AllCardNames(adds)

                        <span class="ml-2 badge badge-secondary badge-pill">
                            @adds.Sum(c => c.Amount) 
                        </span>
                    }
                    @if (both) { <br> }
                    @if (anyRemoves)
                    {
                        <strong> Removed </strong> @AllCardNames(removes)

                        <span class="ml-2 badge badge-secondary badge-pill">
                            @removes.Sum(c => c.Amount) 
                        </span>
                    }
                </p>

                <small class="text-muted"> @ElapsedTime(transaction) </small>
            </li>
        }
    </ul>
</div>


@code {

    [Parameter]
    public int NameLength { get; set; } = 80;

    [Parameter]
    public int NumberOfCards { get; set; } = 4;

    private readonly Random _random = new();
    private readonly CancellationTokenSource _cancel = new();

    private bool _isBusy;
    private DateTime _currentTime;

    private IReadOnlyList<Card> _randomCards = Array.Empty<Card>();
    private IReadOnlyList<Transaction> _recentChanges = Array.Empty<Transaction>();


    private string AllCardNames(IEnumerable<Change> changes)
    {
        var cardNames = changes
            .GroupBy(c => c.Card.Name, (name, _) => name);

        var cards = string.Join(", ", cardNames);
        var cardLimit = Math.Min(cards.Length, NameLength);

        var elipsis = cardLimit < cards.Length ? "..." : string.Empty;

        return $"{cards.Substring(0, cardLimit)}{elipsis}";
    }


    private string ElapsedTime(Transaction transaction)
    {
        var elapsed = _currentTime - transaction.AppliedAt;

        return elapsed switch
        {
            { Days: >0 } => $"{elapsed.Days} days ago",
            { Hours: >0 } => $"{elapsed.Hours} hours ago",
            { Minutes: >0 } => $"{elapsed.Minutes} min ago",
            _ => $"{elapsed.Seconds} sec ago"
        };
    }



    protected override async Task OnParametersSetAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await using var dbContext = DbFactory.CreateDbContext();

            _randomCards = await ShuffledCards(dbContext)
                .ToListAsync(_cancel.Token);

            _recentChanges = await RecentTransactions(dbContext)
                .ToListAsync(_cancel.Token);

            _currentTime = DateTime.Now;
        }
        catch (OperationCanceledException ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    public void Dispose()
    {
        _cancel.Cancel();
        _cancel.Dispose();
    }


    private IQueryable<Card> ShuffledCards(CardDbContext dbContext)
    {
        return dbContext.Cards
            .OrderBy(_ => EF.Functions.Random())
            .Take(NumberOfCards);
    }


    private IQueryable<Transaction> RecentTransactions(CardDbContext dbContext)
    {
        return dbContext.Transactions
            .Where(t => t.Changes.Any(c => c.To is Box || c.From is Box))

            .Include(t => t.Changes)
                .ThenInclude(c => c.Card)

            .Include(t => t.Changes)
                .ThenInclude(c => c.From)

            .Include(t => t.Changes)
                .ThenInclude(c => c.To)

            .Include(t => t.Changes
                .Where(c => c.To is Box || c.From is Box)
                .OrderBy(c => c.Card.Name))

            .OrderByDescending(t => t.AppliedAt)
            .Take(NumberOfCards);
    }
}