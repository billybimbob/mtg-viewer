@using System.Linq.Expressions
@using Microsoft.Extensions.DependencyInjection
@using MTGViewer.Data.Internal
@namespace MTGViewer.Components

@inherits OwningComponentBase
@inject SymbolFormatter MtgSymbols


<h1>Add New Card(s)</h1>

<SavePrompt @bind-Result="_result">
    <SuccessMessage>
        New cards were successfully added.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issues while try to add the new cards.
    </ErrorMessage>
</SavePrompt>

@if (!_matches.Any())
{
    <hr />
    <EditForm EditContext="@_searchEdit" OnValidSubmit="@SearchForCardAsync">
        <DataAnnotationsValidator />
        <div class="row">

            <div class="col-sm order-sm-last">
                <ValidationSummary role="alert"/>

                <h5> Or Operator </h5>
                <p> 
                    All of the parameters (except Converted Mana Cost) can search with multiple values 
                    specified by adding the pipe character between each value. These multiple values act 
                    as a logical <strong>or</strong> for the search.
                </p>

                <p> Example or for Name: <code>jace|ajani|nissa, worldwaker</code> </p>

                <h5> And Operator </h5>
                <p>
                    Parameters that can have more than one value per card (Types, Supertypes, and Subtypes) 
                    can also have multiple values specified by adding a comma or space between each value. 
                    These multiple values act as a logical <strong>and</strong> for the search.
                </p>

                <p> Example and for Subtype(s): <code>bear,bird</code> or <code>bear bird</code> </p>
                <p> 
                    Note that <strong>either</strong> the <i>and</i> or the <i>or</i> operator can be
                    applied on a given parameter value, not both.
                </p>

                <hr/>
                <h5> Type Parameters </h5>

                <p>
                    All of the type parameters are specified on the type line of the card (the center description),
                    which is broken down into three different categories:
                </p>

                <dl class="row">
                    <dt class="col-2"> Supertypes </dt>
                    <dd class="col">
                        <p> Type information that is the most left of the type line </p>
                        <p> Examples: Basic, Legendary, Snow </p>
                    </dd>

                    <div class="w-100"></div>

                    <dt class="col-2"> Types </dt>
                    <dd class="col">
                        <p> Type information that follows immediately to the left of the dash. </p>
                        <p> Examples: Instant, Creature, Land, Planeswalker </p>
                    </dd>

                    <div class="w-100"></div>

                    <dt class="col-2"> Subtypes </dt>
                    <dd class="col">
                        <p> Type information that appears to the right of the dash. </p>
                        <p> Examples: Equipment, Aura, Human, Vampire </p>
                    </dd>
                </dl>
            </div>

            <div class="col-sm-4">
                <p> Enter the card search parameters below </p>

                <InputText @bind-Value="_search.Name" 
                    placeholder="@_search.DisplayName(c => c.Name)" 
                    class="form-control mb-3" />

                <InputNumber @bind-Value="_search.Cmc" min="0"
                    placeholder="@_search.DisplayName(c => c.Cmc)" 
                    class="form-control mb-3" />

                <div class="mb-3">
                    @foreach (var (symbol, color) in Color.Symbols)
                    {
                        var toggleId = $"{color}Toggle";
                        var active = _pickedColors.Contains(color) ? "active" : string.Empty;

                        <button title="@toggleId"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded @active"
                            @onclick="() => ColorToggle(color)">
                            <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                        </button>
                    }

                    <div class="form-check mt-2 ml-2">
                        <input class="form-check-input" id="@nameof(_multiColored)" 
                            type="checkbox" 
                            checked="@_multiColored"
                            @onchange="MultiColorSwitch" />

                        <label class="form-check-label" for="@nameof(_multiColored)">
                            Multicolored Only
                        </label>
                    </div>
                </div>

                <InputText @bind-Value="_search.Supertypes"
                    placeholder="@_search.DisplayName(c => c.Supertypes)"
                    class="form-control mb-3" />

                <InputText @bind-Value="_search.Types"
                    placeholder="@_search.DisplayName(c => c.Types)"
                    class="form-control mb-3" />

                <InputText @bind-Value="_search.Subtypes"
                    placeholder="@_search.DisplayName(c => c.Subtypes)"
                    class="form-control mb-3" />

                <InputText @bind-Value="_search.SetName" 
                    placeholder="@_search.DisplayName(c => c.SetName)" 
                    class="form-control mb-3" />

                <div class="row mb-3">
                    @for (int i = 0; i < Rarity.Values.Count; ++i)
                    {
                        var rarity = Rarity.Values[i];
                        var toggleId = $"{rarity}-toggle";
                        var picked = _pickedRarities.Contains(rarity);

                        <div class="col-6">
                            <div class="form-check form-check-inline ml-2">

                                <input class="form-check-input" id="@toggleId"
                                    type="checkbox" checked="@picked" 
                                    @onclick="() => RarityToggle(rarity)"
                                    value="@rarity" />

                                <label class="form-check-label" for="@toggleId"> @rarity </label>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-group">
                    <InputText @bind-Value="_search.Artist" 
                        placeholder="@_search.DisplayName(c => c.Artist)" 
                        class="form-control mb-3" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="_search.Power" 
                        placeholder="@_search.DisplayName(c => c.Power)" 
                        class="form-control mb-3" />
                </div>

                <InputText @bind-Value="_search.Toughness" 
                    placeholder="@_search.DisplayName(c => c.Toughness)" 
                    class="form-control mb-3" />

                <InputText @bind-Value="_search.Loyalty" 
                    placeholder="@_search.DisplayName(c => c.Loyalty)" 
                    class="form-control mb-3" />

                <div class="btn-group" role="group">
                    <button type="submit" class="btn btn-secondary" 
                        title="Search For Card"
                        disabled="@IsBusy">
                        Search </button>

                    <button type="button" class="btn btn-secondary" 
                        @onclick="Reset" title="Reset All Fields"
                        disabled="@IsBusy">
                        Reset </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="btn-group" role="group">
        <button title="Add Button" type="button"
            @onclick="AddNewCardsAsync" 
            disabled="@(CannotAdd || IsBusy)" 
            class="btn btn-secondary">
            Add Cards/Amounts </button>

        <button title="Reset Button" type="button"
            @onclick="Reset" 
            disabled="@IsBusy"
            class="btn btn-secondary">
            Reset </button>
    </div>

    <div class="row align-items-center my-3">

        <div class="col-12 col-md-4">
            <input class="form-control" placeholder="Name" @bind="_matchName" />
        </div>

        <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
            @foreach (var (symbol, color) in Color.Symbols)
            {
                var active = _pickedColors.Contains(color) ? "active" : "";

                <button title="@color filter"
                        type="button"
                        class="btn btn-outline-secondary border-0 rounded @active"
                        @onclick="() => ColorToggle(color)">
                    <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                </button>
            }
        </div>
    </div>

    <div class="table-responsive-md">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"> @DisplayName(c => c.Name) </th>
                    <th scope="col"> @DisplayName(c => c.ManaCost) </th>
                    <th scope="col"> @DisplayName(c => c.SetName) </th>
                    <th scope="col"> @DisplayName(c => c.Rarity) </th>
                    <th scope="col"> Amount </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (match, amount) in _matches)
                {
                    @if (MatchPassesFilters(match))
                    {
                        <tr>
                            <td> 
                                <HoverCard Card="@((CardPreview)match)">
                                    <span class="btn-link">@match.Name</span> 
                                </HoverCard> 
                            </td>
                            <td> @MtgSymbols.Format(match.ManaCost).ToMarkupString() </td>
                            <td> @match.SetName </td>
                            <td> @match.Rarity </td>
                            <td>
                                <input title="@match.Name Amount" 
                                    type="number" min="0" value="@amount" 
                                    @onchange="e => UpdateAmount(e, match)"
                                    class="form-control w-50" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <button title="More Results" type="button"
        @onclick="SearchForCardAsync" 
        disabled="@(HasNoNext || IsBusy)"
        class="btn btn-secondary">
        Load More</button>
}


@code {
    private bool CannotAdd => _matches.All(kv => kv.Value <= 0);
    private bool HasNoNext => !_pages.HasNext;
    private bool IsBusy => _isBusy;

    private string DisplayName<T>(Expression<Func<Card, T>> property) =>
        EntityExtensions.DisplayName(property);

    private readonly CancellationTokenSource _cancel = new();
    private bool _isBusy;
    private SaveResult _result;

    private bool _multiColored;
    private readonly HashSet<string> _pickedColors = new(StringComparer.OrdinalIgnoreCase);
    private readonly HashSet<string> _pickedRarities = new(StringComparer.OrdinalIgnoreCase);

    private readonly CardQuery _search = new();
    private EditContext? _searchEdit;
    private ValidationMessageStore? _resultErrors;

    private readonly Dictionary<Card, int> _matches = new();
    private string? _matchName;
    private Pages _pages;


    protected override void OnInitialized()
    {
        _searchEdit = new(_search);
        _resultErrors = new(_searchEdit);

        Reset();

        _searchEdit.OnValidationRequested += ClearErrors;
        _searchEdit.OnFieldChanged += ClearErrors;
    }


    protected override void Dispose(bool disposing)
    {
        if (_searchEdit is not null)
        {
            _searchEdit.OnValidationRequested -= ClearErrors;
            _searchEdit.OnFieldChanged -= ClearErrors;
        }

        _cancel.Cancel();
        _cancel.Dispose();
    }
    


    private void ClearErrors(object? sender, ValidationRequestedEventArgs args)
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        _resultErrors.Clear();
        _searchEdit.NotifyValidationStateChanged();
    }


    private void ClearErrors(object? sender, FieldChangedEventArgs args)
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        var idField = _searchEdit.Field(nameof(CardQuery.Id));

        _resultErrors.Clear(idField);
        _resultErrors.Clear(args.FieldIdentifier);

        _searchEdit.NotifyValidationStateChanged();
    }


    private void NoMatchError()
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        var idField = _searchEdit.Field(nameof(CardQuery.Id));
        var noMatch = new []{ "No matches were found" };

        _resultErrors.Add(idField, noMatch);
        _searchEdit.NotifyValidationStateChanged();
    }


    private void MultiColorSwitch(ChangeEventArgs args)
    {
        if (_searchEdit is null)
        {
            return;
        }

        if (!bool.TryParse(args.Value?.ToString(), out bool value))
        {
            return;
        }

        _multiColored = value;

        var colorField = _searchEdit.Field(nameof(CardQuery.Colors));

        _searchEdit.NotifyFieldChanged(colorField);
    }


    private void ColorToggle(string color)
    {
        if (_searchEdit is null)
        {
            return;
        }

        if (_pickedColors.Contains(color))
        {
            _pickedColors.Remove(color);
        }
        else
        {
            _pickedColors.Add(color);
        }

        var colorField = _searchEdit.Field(nameof(CardQuery.Colors));

        _searchEdit.NotifyFieldChanged(colorField);
    }


    private void RarityToggle(string rarity)
    {
        if (_searchEdit is null)
        {
            return;
        }

        if (_pickedRarities.Contains(rarity))
        {
            _pickedRarities.Remove(rarity);
        }
        else
        {
            _pickedRarities.Add(rarity);
        }

        var rarityField = _searchEdit.Field(nameof(CardQuery.Rarity));

        _searchEdit.NotifyFieldChanged(rarityField);
    }


    private async Task SearchForCardAsync()
    {
        if (_isBusy)
        {
            return;
        }

        if (_pages != default && !_pages.HasNext)
        {
            return;
        }

        _isBusy = true;
        _result = SaveResult.None;

        var cancelToken = _cancel.Token;

        var logger = ScopedServices.GetRequiredService<ILogger<Create>>();
        var fetch = ScopedServices.GetRequiredService<MTGFetchService>();

        try
        {
            PrepareSearch();

            var result = await fetch.Where(_search).SearchAsync();

            cancelToken.ThrowIfCancellationRequested();
            _pages = result.Pages;

            foreach (var match in result)
            {
                _matches.Add(match, 0);
            }

            if (!_matches.Any())
            {
                NoMatchError();
            }
        }
        catch (OperationCanceledException ex)
        {
            logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    private void PrepareSearch()
    {
        var colorJoin = _multiColored ? MTGFetchService.And : MTGFetchService.Or;

        _search.Colors = string.Join(colorJoin, _pickedColors);

        _search.Rarity = string.Join(MTGFetchService.Or, _pickedRarities);

        _search.Page = _pages == default ? 0 : _pages.Current + 1;
    }


    private void UpdateAmount(ChangeEventArgs args, Card card)
    {
        if (int.TryParse(args.Value?.ToString(), out int newAmount)
            && newAmount >= 0)
        {
            _matches[card] = newAmount;
        }
    }


    private bool MatchPassesFilters(Card match)
    {
        const StringComparison ignoreCase = StringComparison.CurrentCultureIgnoreCase;

        var matchColors = match.Colors.Select(c => c.Name);

        bool nameMatches = string.IsNullOrWhiteSpace(_matchName) 
            || match.Name.Contains(_matchName, ignoreCase);

        bool colorMatches = _pickedColors.Count == 0 
            || _pickedColors.Overlaps(matchColors);

        return nameMatches && colorMatches;
    }


    private void Reset()
    {
        if (_searchEdit is null)
        {
            return;
        }

        if (_isBusy)
        {
            return;
        }

        _pickedColors.Clear();

        _matches.Clear();
        _pages = default;

        _search.Name = default;
        _search.Cmc = default;
        _search.Colors = default;
        _search.Rarity = default;
        _search.SetName = default;

        _search.Supertypes = default;
        _search.Types = default;
        _search.Subtypes = default;

        _search.Artist = default;
        _search.Power = default;
        _search.Toughness = default;
        _search.Loyalty = default;

        // force data validation, might be inefficient
        _searchEdit.Validate();
    }


    private async Task AddNewCardsAsync()
    {
        if (_isBusy)
        {
            return;
        }

        var addedAmounts = _matches
            .Where(kv => kv.Value > 0)
            .Select(kv => new CardRequest(kv.Key, kv.Value))
            .ToList();

        if (!addedAmounts.Any())
        {
            return;
        }

        _isBusy = true;
        _result = SaveResult.None;

        var cancelToken = _cancel.Token;

        var dbFactory = ScopedServices.GetRequiredService<IDbContextFactory<CardDbContext>>();
        var logger = ScopedServices.GetRequiredService<ILogger<Create>>();

        try
        {
            await using var dbContext = await dbFactory.CreateDbContextAsync(cancelToken);

            await AddNewCardsAsync(dbContext, addedAmounts, cancelToken);

            await AddAmountsAsync(dbContext, addedAmounts, cancelToken);

            await dbContext.SaveChangesAsync(cancelToken);

            // nav.NavigateTo("/Cards", true);
            _result = SaveResult.Success;
        }
        catch (DbUpdateException e)
        {
            logger.LogError($"failed to add new cards {e}");

            _result = SaveResult.Error;
        }
        catch (InvalidOperationException e)
        {
            logger.LogError($"failed to add new cards {e}");

            _result = SaveResult.Error;
        }
        catch (OperationCanceledException e)
        {
            logger.LogError($"cancel error: {e}");

            _result = SaveResult.Error;
        }
        finally
        {
            _isBusy = false;
            Reset();
        }
    }


    private async Task AddNewCardsAsync(
        CardDbContext dbContext,
        IReadOnlyList<CardRequest> requests,
        CancellationToken cancel)
    {
        var requestCards = requests
            .Select(req => req.Card)
            .ToList();

        var cardIds = requestCards
            .Select(c => c.Id)
            .ToArray();

        var existingIds = await dbContext.Cards
            .Select(c => c.Id)
            .Where(cid => cardIds.Contains(cid))
            .ToListAsync(cancel);

        var existingCards = requestCards
            .IntersectBy(existingIds, c => c.Id);

        var newCards = requestCards
            .ExceptBy(existingIds, c => c.Id);

        dbContext.Cards.AttachRange(existingCards);
        dbContext.Cards.AddRange(newCards);
    }


    private async Task AddAmountsAsync(
        CardDbContext dbContext,
        IEnumerable<CardRequest> newAmounts,
        CancellationToken cancel)
    {
        var treasury = ScopedServices.GetRequiredService<ITreasuryQuery>();

        var result = await treasury.FindReturnAsync(newAmounts, cancel);

        var (addTargets, oldCopies) = result;
        var newTransaction = new Transaction();

        var addChanges = addTargets
            .Select(a => new Change
            {
                Card = a.Card,
                To = a.Location,
                Amount = a.NumCopies - oldCopies.GetValueOrDefault(a.Id),
                Transaction = newTransaction
            });

        dbContext.AttachResult(result);

        dbContext.Transactions.Attach(newTransaction);
        dbContext.Changes.AttachRange(addChanges);
    }
}