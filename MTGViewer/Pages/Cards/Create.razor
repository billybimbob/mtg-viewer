@page "/Cards/Create"
@inject SymbolFormatter MtgSymbols
@using MTGViewer.Data.Internal

<PageTitle> Add Cards </PageTitle>

<h1>Add Card(s)</h1>

<SavePrompt @bind-Result="Result">
    <SuccessMessage>
        New cards were successfully added.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issues while try to add the new cards.
    </ErrorMessage>
</SavePrompt>

@if (!Matches.Any() && IsFromForm)
{
    <hr />
    <EditForm OnValidSubmit="@SubmitSearch" EditContext="@SearchEdit">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-md order-md-last">
                <ValidationSummary role="alert"/>
                <section>
                    <h5> Parameter Descriptions </h5>
                    <p> Search by different attributes of an MTG card: </p>

                    <dl class="row mb-0">
                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.Name) </dt>
                        <dd class="col-12 col-lg-10">
                            <p>
                                The Name of the Card (in the top left). Split cards are treated
                                as separate cards, so only side of the card should be specified.
                            </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.Colors) </dt>
                        <dd class="col-12 col-lg-10">
                            <p>
                                The color identity of the card. Color identity is affected by
                                a card's mana cost, but also mana abilities costs and text
                                effects. Multiple colors can be specified, where the searched
                                must have <i>all</i> selected colors.
                            </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.SetName) </dt>
                        <dd class="col-12 col-lg-10">
                            <p>
                                The set at which a specific card print was apart of. The set
                                can only be specified by the set <i>name</i>, not the set code.
                            </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.Type) </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information specified on the middle of the card </p>
                            <p> Examples: Basic Land, Planeswalker, Creature Enchantment </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.Text) </dt>
                        <dd class="col-12 col-lg-10">
                            <p>
                                The card effect text. The Oracle Text can also be searched by
                                keywords and phrases.
                            </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> @Query.DisplayName(c => c.Flavor) </dt>
                        <dd class="col-12 col-lg-10">
                            <p>
                                The card flavor text. This is the card text that is in italics, and can differ
                                across card prints.
                            </p>
                        </dd>
                    </dl>
                </section>
            </div>

            <hr class="d-md-none col-12"/>

            <div class="col-md col-lg-4">
                <p> Enter the card search parameters below </p>

                <div class="form-group">
                    <InputText @bind-Value="Query.Name"
                        placeholder="@Query.DisplayName(c => c.Name)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputNumber @bind-Value="Query.Cmc" min="0"
                        placeholder="@Query.DisplayName(c => c.Cmc)"
                        class="form-control" />
                </div>

                <div class="form-group btn-group">
                    @foreach (var (color, symbol) in Symbol.Colors)
                    {
                        <button title="Toggle @color"
                            disabled="@IsLoading" type="button"
                            class="btn btn-outline-secondary ms-filter @ActiveColor(color)"
                            @onclick="() => ToggleColor(color)">
                            <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                        </button>
                    }
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.SetName"
                        placeholder="@Query.DisplayName(c => c.SetName)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputSelect @bind-Value="Query.Rarity"
                        title="Choose Rarity" class="form-control">

                        <option value="@(null as Rarity?)"> Choose Rarity </option>

                        @foreach (var rarity in Enum.GetValues<Rarity>())
                        {
                            <option value="@rarity">@rarity</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Type"
                        placeholder="@Query.DisplayName(c => c.Type)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Power"
                        placeholder="@Query.DisplayName(c => c.Power)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Toughness"
                        placeholder="@Query.DisplayName(c => c.Toughness)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Loyalty"
                        placeholder="@Query.DisplayName(c => c.Loyalty)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputTextArea @bind-Value="Query.Text"
                        placeholder="@Query.DisplayName(c => c.Text)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputTextArea @bind-Value="Query.Flavor"
                        placeholder="@Query.DisplayName(c => c.Flavor)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Artist"
                        placeholder="@Query.DisplayName(c => c.Artist)"
                        class="form-control" />
                </div>

                <div class="btn-group" role="group">

                    <button type="submit" class="btn btn-secondary"
                        title="Search For Card" disabled="@(IsEmpty || IsLoading)">
                        @if (IsLoading)
                        {
                            <text>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                                Loading...
                            </text>
                        }
                        else
                        {
                            <text> Search </text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="btn-group pb-2" role="group">
        <button title="Reset Search Arguments"
            type="button"
            @onclick="Reset"
            disabled="@IsLoading"
            class="btn btn-danger">
            Reset </button>

        <button title="Add Selected Cards"
            type="button"
            class="btn btn-secondary"
            @onclick="AddNewCardsAsync"
            disabled="@(CannotAdd() || IsLoading)">
            Add Cards/Copies </button>
    </div>

    <div class="table-responsive-md">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"> @DisplayName(c => c.Name) </th>
                    <th scope="col"> @DisplayName(c => c.ManaCost) </th>
                    <th scope="col"> @DisplayName(c => c.SetName) </th>
                    <th scope="col"> @DisplayName(c => c.Rarity) </th>
                    <th scope="col"> Copies </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in Matches)
                {
                    var card = match.Card;
                    <tr>
                        <td>
                            <HoverCard Target="card">
                                @if (match.HasDetails)
                                {
                                    <a href="/Cards/Details/@card.Id"> @card.Name </a>
                                }
                                else
                                {
                                    <span class="btn-link"> @card.Name </span>
                                }
                            </HoverCard>
                        </td>
                        <td>
                            <div class="ms-group">
                                @MtgSymbols.Format(card.ManaCost).ToMarkupString()
                            </div>
                        </td>
                        <td> @card.SetName </td>
                        <td> @card.Rarity </td>
                        <td>
                            <input @bind="match.Copies"
                                title="@card.Name Copies"
                                type="number" min="0" max="@match.Limit"
                                class="form-control amt-input" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="btn-group pb-3">
        <button title="More Results" type="button"
            class="btn btn-secondary"
            @onclick="LoadMoreCardsAsync"
            disabled="@(HasNoNext || IsLoading)" >
            @if (IsLoading)
            {
                <text>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                    Loading...
                </text>
            }
            else
            {
                <text> Load More </text>
            }
        </button>
    </div>
}

@code
{
    internal static string DisplayName<T>(Expression<Func<Card, T>> property) =>
        EntityExtensions.DisplayName(property);

    internal string ActiveColor(Color color) =>
        Query.Colors.HasFlag(color) ? "active" : string.Empty;

    internal bool CannotAdd() =>
        !Matches.Any() || Matches.All(m => m.Copies == 0);
}
