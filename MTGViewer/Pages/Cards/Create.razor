@page "/Cards/Create"
@inherits OwningComponentBase
@inject SymbolFormatter MtgSymbols
@using MTGViewer.Data.Internal


<PageTitle> Add Cards </PageTitle>

<h1>Add New Card(s)</h1>

<SavePrompt @bind-Result="Result">
    <SuccessMessage>
        New cards were successfully added.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issues while try to add the new cards.
    </ErrorMessage>
</SavePrompt>

@if (!Matches.Any())
{
    <hr />
    <EditForm EditContext="@_searchEdit" OnValidSubmit="@SearchForCardAsync">
        <DataAnnotationsValidator />
        <div class="row">

            <div class="col-md order-md-last">
                <ValidationSummary role="alert"/>

                <section>
                    <h5> Or Operator </h5>
                    <p> 
                        All of the parameters (except Converted Mana Cost) can search with multiple values 
                        specified by adding the pipe character between each value. These multiple values act 
                        as a logical <strong>or</strong> for the search.
                    </p>

                    <p> Example or for Name: <code>jace|ajani|nissa, worldwaker</code> </p>
                </section>

                <section>
                    <h5> And Operator </h5>
                    <p>
                        Parameters that can have more than one value per card (Types, Supertypes, and Subtypes) 
                        can also have multiple values specified by adding a comma or space between each value. 
                        These multiple values act as a logical <strong>and</strong> for the search.
                    </p>

                    <p> Example and for Subtype(s): <code>bear,bird</code> or <code>bear bird</code> </p>
                    <p> 
                        Note that <strong>either</strong> the <i>and</i> or the <i>or</i> operator can be
                        applied on a given parameter value, not both.
                    </p>
                </section>

                <hr/>
                <section>
                    <h5> Type Parameters </h5>
                    <p>
                        All of the type parameters are specified on the type line of the card (the center description),
                        which is broken down into three different categories:
                    </p>

                    <dl class="row mb-0">
                        <dt class="col-12 col-lg-2"> Supertypes </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that is the most left of the type line </p>
                            <p> Examples: Basic, Legendary, Snow </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> Types </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that follows immediately to the left of the dash. </p>
                            <p> Examples: Instant, Creature, Land, Planeswalker </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> Subtypes </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that appears to the right of the dash. </p>
                            <p> Examples: Equipment, Aura, Human, Vampire </p>
                        </dd>
                    </dl>
                </section>
            </div>

            <hr class="d-md-none col-12"/>

            <div class="col-md col-lg-4">
                <p> Enter the card search parameters below </p>

                <div class="form-group">
                    <InputText @bind-Value="Query.Name" 
                        placeholder="@Query.DisplayName(c => c.Name)" 
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputNumber @bind-Value="Query.Cmc" min="0"
                        placeholder="@Query.DisplayName(c => c.Cmc)" 
                        class="form-control" />
                </div>

                <div class="form-group">
                    @foreach (var (symbol, color) in Color.Symbols)
                    {
                        <button title="toggle @color"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded @ActiveColor(color)"
                            @onclick="() => ColorToggle(color)">
                            <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                        </button>
                    }

                    <div class="form-check mt-2 ml-2">
                        <InputCheckbox @bind-Value="IsMultiColored"
                            class="form-check-input" id="@nameof(CardSearch.IsMultiColored)" />

                        <label class="form-check-label" for="@nameof(CardSearch.IsMultiColored)">
                            Multicolored Only
                        </label>
                    </div>
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Supertypes"
                        placeholder="@Query.DisplayName(c => c.Supertypes)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Types"
                        placeholder="@Query.DisplayName(c => c.Types)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Subtypes"
                        placeholder="@Query.DisplayName(c => c.Subtypes)"
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.SetName" 
                        placeholder="@Query.DisplayName(c => c.SetName)" 
                        class="form-control" />
                </div>

                <div class="row form-group">
                    @foreach (var rarity in Enum.GetNames<Rarity>())
                    {
                        var toggleId = $"{rarity}-toggle";

                        <div class="col-6">
                            <div class="form-check form-check-inline ml-2">

                                <input class="form-check-input" id="@toggleId"
                                    type="checkbox" value="@rarity"
                                    checked="@IsRaritySelected(rarity)" 
                                    @onchange="() => RarityToggle(rarity)" />

                                <label class="form-check-label" for="@toggleId"> @rarity </label>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Artist" 
                        placeholder="@Query.DisplayName(c => c.Artist)" 
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Power" 
                        placeholder="@Query.DisplayName(c => c.Power)" 
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Toughness" 
                        placeholder="@Query.DisplayName(c => c.Toughness)" 
                        class="form-control" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Loyalty" 
                        placeholder="@Query.DisplayName(c => c.Loyalty)" 
                        class="form-control" />
                </div>

                <div class="btn-group" role="group">

                    <button type="button" class="btn btn-danger" 
                        @onclick="Reset" title="Reset All Fields"
                        disabled="@IsBusy">
                        Reset </button>

                    <button type="submit" class="btn btn-secondary" 
                        title="Search For Card" disabled="@IsBusy">
                        @if (IsBusy)
                        {
                            <text>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                                Loading...
                            </text>
                        }
                        else
                        {
                            <text> Search </text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="btn-group" role="group">
        <button title="Reset Button" type="button"
            @onclick="Reset" 
            disabled="@IsBusy"
            class="btn btn-danger">
            Reset </button>

        <button title="Add Button" type="button"
            class="btn btn-secondary"
            @onclick="AddNewCardsAsync" 
            disabled="@(CannotAdd() || IsBusy)">
            Add Cards/Amounts </button>
    </div>

    <div class="row align-items-center my-3">

        <div class="col-12 col-md-4">
            <input class="form-control" placeholder="Name" @bind="MatchName" />
        </div>

        <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
            @foreach (var (symbol, color) in Color.Symbols)
            {
                <button title="@color filter"
                    type="button"
                    class="btn btn-outline-secondary border-0 rounded @ActiveColor(color)"
                    @onclick="() => ColorToggle(color)">

                    <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                </button>
            }
        </div>
    </div>

    <div class="table-responsive-md">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"> @DisplayName(c => c.Name) </th>
                    <th scope="col"> @DisplayName(c => c.ManaCost) </th>
                    <th scope="col"> @DisplayName(c => c.SetName) </th>
                    <th scope="col"> @DisplayName(c => c.Rarity) </th>
                    <th scope="col"> Amount </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in Matches)
                {
                    @if (MatchPassesFilters(match))
                    {
                        var card = match.Card;
                        <tr>
                            <td> 
                                <HoverCard Target="card">
                                    <span class="btn-link">@card.Name</span> 
                                </HoverCard> 
                            </td>
                            <td> @MtgSymbols.Format(card.ManaCost).ToMarkupString() </td>
                            <td> @card.SetName </td>
                            <td> @card.Rarity </td>
                            <td>
                                <input @bind="match.NumCopies"
                                    title="@card.Name Amount" 
                                    type="number" min="0" max="@PageSizes.Limit"
                                    class="form-control w-50" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <button title="More Results" type="button"
        class="btn btn-secondary"
        @onclick="SearchForCardAsync" 
        disabled="@(HasNoNext || IsBusy)" >
        @if (IsBusy)
        {
            <text>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                Loading...
            </text>
        }
        else
        {
            <text> Load More </text>
        }
    </button>
}


@code
{
    public static string DisplayName<T>(Expression<Func<Card, T>> property) =>
        EntityExtensions.DisplayName(property);

    public string ActiveColor(string color) =>
        PickedColors.Contains(color) ? "active" : string.Empty;

    public bool IsRaritySelected(string rarity) =>
        PickedRarities.Contains(rarity);

    public bool CannotAdd() =>
        !Matches.Any() || Matches.All(m => m.NumCopies == 0);
}
