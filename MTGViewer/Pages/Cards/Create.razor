@page "/Cards/Create"
@attribute [Authorize]
@inherits OwningComponentBase

@using Microsoft.Extensions.DependencyInjection
@using MTGViewer.Data.Internal

@inject IDbContextFactory<CardDbContext> DbFactory
@inject SymbolFormatter MtgSymbols
@inject ILogger<Create> Logger


<PageTitle> Add Cards </PageTitle>

<h1>Add New Card(s)</h1>

<SavePrompt @bind-Result="_result">
    <SuccessMessage>
        New cards were successfully added.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issues while try to add the new cards.
    </ErrorMessage>
</SavePrompt>

@if (!Matches.Any())
{
    <hr />
    <EditForm EditContext="@_searchEdit" OnValidSubmit="@SearchForCardAsync">
        <DataAnnotationsValidator />
        <div class="row">

            <div class="col-md order-md-last">
                <ValidationSummary role="alert"/>

                <section>
                    <h5> Or Operator </h5>
                    <p> 
                        All of the parameters (except Converted Mana Cost) can search with multiple values 
                        specified by adding the pipe character between each value. These multiple values act 
                        as a logical <strong>or</strong> for the search.
                    </p>

                    <p> Example or for Name: <code>jace|ajani|nissa, worldwaker</code> </p>
                </section>

                <section>
                    <h5> And Operator </h5>
                    <p>
                        Parameters that can have more than one value per card (Types, Supertypes, and Subtypes) 
                        can also have multiple values specified by adding a comma or space between each value. 
                        These multiple values act as a logical <strong>and</strong> for the search.
                    </p>

                    <p> Example and for Subtype(s): <code>bear,bird</code> or <code>bear bird</code> </p>
                    <p> 
                        Note that <strong>either</strong> the <i>and</i> or the <i>or</i> operator can be
                        applied on a given parameter value, not both.
                    </p>
                </section>

                <hr/>
                <section>
                    <h5> Type Parameters </h5>
                    <p>
                        All of the type parameters are specified on the type line of the card (the center description),
                        which is broken down into three different categories:
                    </p>

                    <dl class="row mb-0">
                        <dt class="col-12 col-lg-2"> Supertypes </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that is the most left of the type line </p>
                            <p> Examples: Basic, Legendary, Snow </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> Types </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that follows immediately to the left of the dash. </p>
                            <p> Examples: Instant, Creature, Land, Planeswalker </p>
                        </dd>

                        <dt class="col-12 col-lg-2"> Subtypes </dt>
                        <dd class="col-12 col-lg-10">
                            <p> Type information that appears to the right of the dash. </p>
                            <p> Examples: Equipment, Aura, Human, Vampire </p>
                        </dd>
                    </dl>
                </section>
            </div>

            <hr class="d-md-none col-12"/>

            <div class="col-md col-lg-4">
                <p> Enter the card search parameters below </p>

                <InputText @bind-Value="Query.Name" 
                    placeholder="@Query.DisplayName(c => c.Name)" 
                    class="form-control mb-3" />

                <InputNumber @bind-Value="Query.Cmc" min="0"
                    placeholder="@Query.DisplayName(c => c.Cmc)" 
                    class="form-control mb-3" />

                <div class="mb-3">
                    @foreach (var (symbol, color) in Color.Symbols)
                    {
                        <button title="toggle @color"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded @ActiveColor(color)"
                            @onclick="() => ColorToggle(color)">
                            <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                        </button>
                    }

                    <div class="form-check mt-2 ml-2">
                        <input class="form-check-input" id="@nameof(CardSearch.IsMultiColored)" 
                            type="checkbox" 
                            checked="@IsMultiColored"
                            @onchange="MultiColorSwitch" />

                        <label class="form-check-label" for="@nameof(CardSearch.IsMultiColored)">
                            Multicolored Only
                        </label>
                    </div>
                </div>

                <InputText @bind-Value="Query.Supertypes"
                    placeholder="@Query.DisplayName(c => c.Supertypes)"
                    class="form-control mb-3" />

                <InputText @bind-Value="Query.Types"
                    placeholder="@Query.DisplayName(c => c.Types)"
                    class="form-control mb-3" />

                <InputText @bind-Value="Query.Subtypes"
                    placeholder="@Query.DisplayName(c => c.Subtypes)"
                    class="form-control mb-3" />

                <InputText @bind-Value="Query.SetName" 
                    placeholder="@Query.DisplayName(c => c.SetName)" 
                    class="form-control mb-3" />

                <div class="row mb-3">
                    @for (int i = 0; i < Rarity.Values.Count; ++i)
                    {
                        var rarity = Rarity.Values[i];
                        var toggleId = $"{rarity}-toggle";

                        <div class="col-6">
                            <div class="form-check form-check-inline ml-2">

                                <input class="form-check-input" id="@toggleId"
                                    type="checkbox" checked="@RaritySelected(rarity)" 
                                    @onclick="() => RarityToggle(rarity)"
                                    value="@rarity" />

                                <label class="form-check-label" for="@toggleId"> @rarity </label>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Artist" 
                        placeholder="@Query.DisplayName(c => c.Artist)" 
                        class="form-control mb-3" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="Query.Power" 
                        placeholder="@Query.DisplayName(c => c.Power)" 
                        class="form-control mb-3" />
                </div>

                <InputText @bind-Value="Query.Toughness" 
                    placeholder="@Query.DisplayName(c => c.Toughness)" 
                    class="form-control mb-3" />

                <InputText @bind-Value="Query.Loyalty" 
                    placeholder="@Query.DisplayName(c => c.Loyalty)" 
                    class="form-control mb-3" />

                <div class="btn-group" role="group">
                    <button type="submit" class="btn btn-secondary" 
                        title="Search For Card" disabled="@IsBusy">
                        @if (IsBusy)
                        {
                            <text>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                                Loading...
                            </text>
                        }
                        else
                        {
                            <text> Search </text>
                        }
                    </button>

                    <button type="button" class="btn btn-secondary" 
                        @onclick="Reset" title="Reset All Fields"
                        disabled="@IsBusy">
                        Reset </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="btn-group" role="group">
        <button title="Add Button" type="button"
            class="btn btn-secondary"
            @onclick="AddNewCardsAsync" 
            disabled="@(CannotAdd || IsBusy)">
            @if (IsBusy)
            {
                <text>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                    Loading...
                </text>
            }
            else
            {
                <text> Add Cards/Amounts </text>
            }
        </button>

        <button title="Reset Button" type="button"
            @onclick="Reset" 
            disabled="@IsBusy"
            class="btn btn-secondary">
            Reset </button>
    </div>

    <div class="row align-items-center my-3">

        <div class="col-12 col-md-4">
            <input class="form-control" placeholder="Name" @bind="_search.MatchName" />
        </div>

        <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
            @foreach (var (symbol, color) in Color.Symbols)
            {
                <button title="@color filter"
                    type="button"
                    class="btn btn-outline-secondary border-0 rounded @ActiveColor(color)"
                    @onclick="() => ColorToggle(color)">

                    <i class="ms ms-@symbol.ToLower() ms-cost"></i>
                </button>
            }
        </div>
    </div>

    <div class="table-responsive-md">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"> @DisplayName(c => c.Name) </th>
                    <th scope="col"> @DisplayName(c => c.ManaCost) </th>
                    <th scope="col"> @DisplayName(c => c.SetName) </th>
                    <th scope="col"> @DisplayName(c => c.Rarity) </th>
                    <th scope="col"> Amount </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (match, amount) in Matches)
                {
                    @if (MatchPassesFilters(match))
                    {
                        <tr>
                            <td> 
                                <HoverCard Target="match">
                                    <span class="btn-link">@match.Name</span> 
                                </HoverCard> 
                            </td>
                            <td> @MtgSymbols.Format(match.ManaCost).ToMarkupString() </td>
                            <td> @match.SetName </td>
                            <td> @match.Rarity </td>
                            <td>
                                <input title="@match.Name Amount" 
                                    type="number" min="0" value="@amount" 
                                    @onchange="e => UpdateAmount(e, match)"
                                    class="form-control w-50" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <button title="More Results" type="button"
        class="btn btn-secondary"
        @onclick="SearchForCardAsync" 
        disabled="@(HasNoNext || IsBusy)" >
        Load More
    </button>
}


@code {

    private CardQuery Query => _search.Query;
    private bool IsMultiColored => _search.IsMultiColored;

    private IReadOnlyDictionary<Card, int> Matches => _matches;

    private bool CannotAdd => _matches.All(kv => kv.Value <= 0);
    private bool HasNoNext => !_matchPage.HasNext;
    private bool IsBusy => _isBusy;

    private string DisplayName<T>(Expression<Func<Card, T>> property) =>
        EntityExtensions.DisplayName(property);

    private string ActiveColor(string color) =>
        _search.PickedColors.Contains(color) ? "active" : string.Empty;

    private bool RaritySelected(string rarity) =>
        _search.PickedRarities.Contains(rarity);


    private readonly CancellationTokenSource _cancel = new();
    private bool _isBusy;
    private SaveResult _result;

    private readonly CardSearch _search = new();
    private EditContext? _searchEdit;
    private ValidationMessageStore? _resultErrors;

    private readonly Dictionary<Card, int> _matches = new();
    private Pages _matchPage;


    private class CardSearch
    {
        public CardQuery Query { get; } = new();

        public HashSet<string> PickedRarities { get; } = new(StringComparer.OrdinalIgnoreCase);

        public HashSet<string> PickedColors { get; } = new(StringComparer.OrdinalIgnoreCase);

        public bool IsMultiColored { get; set; }

        public string? MatchName { get; set; }
    }


    protected override void OnInitialized()
    {
        _searchEdit = new(_search.Query);
        _resultErrors = new(_searchEdit);

        Reset();

        _searchEdit.OnValidationRequested += ClearErrors;
        _searchEdit.OnFieldChanged += ClearErrors;
    }


    protected override void Dispose(bool disposing)
    {
        if (_searchEdit is not null)
        {
            _searchEdit.OnValidationRequested -= ClearErrors;
            _searchEdit.OnFieldChanged -= ClearErrors;
        }

        if (!disposing)
        {
            return;
        }

        _cancel.Cancel();
        _cancel.Dispose();
    }
    


    private void ClearErrors(object? sender, ValidationRequestedEventArgs args)
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        _resultErrors.Clear();
        _searchEdit.NotifyValidationStateChanged();
    }


    private void ClearErrors(object? sender, FieldChangedEventArgs args)
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        var idField = _searchEdit.Field(nameof(CardQuery.Id));

        _resultErrors.Clear(idField);
        _resultErrors.Clear(args.FieldIdentifier);

        _searchEdit.NotifyValidationStateChanged();
    }


    private void NoMatchError()
    {
        if (_searchEdit is null || _resultErrors is null)
        {
            return;
        }

        var idField = _searchEdit.Field(nameof(CardQuery.Id));
        var noMatch = new []{ "No matches were found" };

        _resultErrors.Add(idField, noMatch);
        _searchEdit.NotifyValidationStateChanged();
    }


    private void MultiColorSwitch(ChangeEventArgs args)
    {
        if (_searchEdit is null)
        {
            return;
        }

        if (!bool.TryParse(args.Value?.ToString(), out bool value))
        {
            return;
        }

        var colorField = _searchEdit.Field(nameof(CardQuery.Colors));

        _search.IsMultiColored = value;

        _searchEdit.NotifyFieldChanged(colorField);
    }


    private void ColorToggle(string color)
    {
        if (_searchEdit is null)
        {
            return;
        }

        var pickedColors = _search.PickedColors;
        var colorField = _searchEdit.Field(nameof(CardQuery.Colors));

        if (pickedColors.Contains(color))
        {
            pickedColors.Remove(color);
        }
        else
        {
            pickedColors.Add(color);
        }

        _searchEdit.NotifyFieldChanged(colorField);
    }


    private void RarityToggle(string rarity)
    {
        if (_searchEdit is null)
        {
            return;
        }

        var pickedRarities = _search.PickedRarities;
        var rarityField = _searchEdit.Field(nameof(CardQuery.Rarity));

        if (pickedRarities.Contains(rarity))
        {
            pickedRarities.Remove(rarity);
        }
        else
        {
            pickedRarities.Add(rarity);
        }

        _searchEdit.NotifyFieldChanged(rarityField);
    }


    private async Task SearchForCardAsync()
    {
        if (_isBusy || (_matchPage != default && !_matchPage.HasNext))
        {
            return;
        }

        _result = SaveResult.None;
        _isBusy = true;

        try
        {
            PrepareSearch(_search, _matchPage);

            var cancelToken = _cancel.Token;
            var fetch = ScopedServices.GetRequiredService<MTGFetchService>();

            var result = await fetch.Where(_search.Query).SearchAsync();
            cancelToken.ThrowIfCancellationRequested();
            
            _matchPage = result.Pages;

            foreach (var match in result)
            {
                _matches.Add(match, 0);
            }

            if (!_matches.Any())
            {
                NoMatchError();
            }
        }
        catch (OperationCanceledException ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    private static void PrepareSearch(CardSearch search, Data.Pages matchPage)
    {
        var query = search.Query;
        var colorJoin = search.IsMultiColored ? MTGFetchService.And : MTGFetchService.Or;

        query.Colors = string.Join(colorJoin, search.PickedColors);
        query.Rarity = string.Join(MTGFetchService.Or, search.PickedRarities);

        query.Page = matchPage == default ? 0 : matchPage.Current + 1;
    }


    private void UpdateAmount(ChangeEventArgs args, Card card)
    {
        if (int.TryParse(args.Value?.ToString(), out int newAmount)
            && newAmount >= 0)
        {
            _matches[card] = newAmount;
        }
    }


    private bool MatchPassesFilters(Card match)
    {
        const StringComparison ignoreCase = StringComparison.CurrentCultureIgnoreCase;
        string? matchName = _search.MatchName;

        var pickedColors = _search.PickedColors;
        var matchColors = match.Colors.Select(c => c.Name);

        bool nameMatches = string.IsNullOrWhiteSpace(matchName) 
            || match.Name.Contains(matchName, ignoreCase);

        bool colorMatches = !pickedColors.Any() 
            || pickedColors.Overlaps(matchColors);

        return nameMatches && colorMatches;
    }


    private void Reset()
    {
        if (_isBusy || _searchEdit is null)
        {
            return;
        }

        _matches.Clear();
        _matchPage = default;

        var query = _search.Query;

        _search.PickedColors.Clear();
        _search.PickedRarities.Clear();

        // TODO: use reflection to reset

        query.Name = default;
        query.Cmc = default;
        query.Colors = default;
        query.Rarity = default;
        query.SetName = default;

        query.Supertypes = default;
        query.Types = default;
        query.Subtypes = default;

        query.Artist = default;
        query.Power = default;
        query.Toughness = default;
        query.Loyalty = default;

        // force data validation, might be inefficient
        _searchEdit.Validate();
    }


    private async Task AddNewCardsAsync()
    {
        if (_isBusy)
        {
            return;
        }

        var addedAmounts = _matches
            .Where(kv => kv.Value > 0)
            .Select(kv => new CardRequest(kv.Key, kv.Value))
            .ToList();

        if (!addedAmounts.Any())
        {
            return;
        }

        _result = SaveResult.None;
        _isBusy = true;

        try
        {
            var cancelToken = _cancel.Token;
            var treasury = ScopedServices.GetRequiredService<ITreasuryQuery>();

            await using var dbContext = await DbFactory.CreateDbContextAsync(cancelToken);

            await AddNewCardsAsync(dbContext, addedAmounts, cancelToken);

            await AddAmountsAsync(dbContext, treasury, addedAmounts, cancelToken);

            await dbContext.SaveChangesAsync(cancelToken);

            _result = SaveResult.Success;
        }
        catch (DbUpdateException e)
        {
            Logger.LogError($"failed to add new cards {e}");

            _result = SaveResult.Error;
        }
        catch (InvalidOperationException e)
        {
            Logger.LogError($"failed to add new cards {e}");

            _result = SaveResult.Error;
        }
        catch (OperationCanceledException e)
        {
            Logger.LogError($"cancel error: {e}");

            _result = SaveResult.Error;
        }
        finally
        {
            _isBusy = false;

            Reset();
        }
    }


    private static async Task AddNewCardsAsync(
        CardDbContext dbContext,
        IReadOnlyList<CardRequest> requests,
        CancellationToken cancel)
    {
        var requestCards = requests
            .Select(req => req.Card)
            .ToList();

        var cardIds = requestCards
            .Select(c => c.Id)
            .ToArray();

        var existingIds = await dbContext.Cards
            .Select(c => c.Id)
            .Where(cid => cardIds.Contains(cid))
            .ToListAsync(cancel);

        var existingCards = requestCards
            .IntersectBy(existingIds, c => c.Id);

        var newCards = requestCards
            .ExceptBy(existingIds, c => c.Id);

        dbContext.Cards.AttachRange(existingCards);
        dbContext.Cards.AddRange(newCards);
    }


    private static async Task AddAmountsAsync(
        CardDbContext dbContext,
        ITreasuryQuery treasury,
        IEnumerable<CardRequest> newAmounts,
        CancellationToken cancel)
    {
        var result = await treasury.FindReturnAsync(newAmounts, cancel);

        var (addTargets, oldCopies) = result;
        var newTransaction = new Transaction();

        var addChanges = addTargets
            .Select(a => new Change
            {
                Card = a.Card,
                To = a.Location,
                Amount = a.NumCopies - oldCopies.GetValueOrDefault(a.Id),
                Transaction = newTransaction
            });

        dbContext.AttachResult(result);

        dbContext.Transactions.Attach(newTransaction);
        dbContext.Changes.AttachRange(addChanges);
    }
}