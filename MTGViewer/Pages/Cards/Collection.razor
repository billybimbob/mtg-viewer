@page "/Cards"
@using MTGViewer.Areas.Identity.Data
@using MTGViewer.Data.Internal
@inject SymbolFormatter MtgSymbols


<PageTitle> Card Collection </PageTitle>

<h1>Card Collection</h1>

<div class="btn-group" role="group">
    <AuthorizeView Policy="@CardPolicies.ChangeTreasury">
        <Authorized>
            <a class="btn btn-secondary" href="/Cards/Create" role="button">Add Card</a>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-secondary" role="button" disabled>Add Card</button>
        </NotAuthorized>
    </AuthorizeView>
</div>

<div class="form-row align-items-center my-3">
    <div class="col-12 col-md-4">
        <input class="form-control" 
            placeholder="Card Name" 
            disabled="@IsBusy"
            @bind="Filters.SearchName" />
    </div>

    <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
        @foreach (var (color, symbol) in Symbol.Colors)
        {
            <button title="@color filter"
                type="button"
                class="btn btn-outline-secondary border-0 rounded @ColorActive(color)"
                disabled="@IsBusy"
                @onclick="() => Filters.ToggleColor(color)">

                <i class="ms ms-@symbol.ToLower() ms-cost"></i>
            </button>
        }
    </div>

    @if (IsBusy)
    {
        <div class="spinner-grow text-secondary p-2" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
</div>

<div class="table-responsive-md">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"
                    title="Order By Name"
                    @onclick="() => Filters.Reorder(c => c.Name)" 
                    class="@HeaderClass(c => c.Name)">
                    @DisplayName(c => c.Name)
                    @Direction(c => c.Name)
                </th>

                <th scope="col" 
                    title="Order By Cmc"
                    @onclick="() => Filters.Reorder(c => c.ManaCost)" 
                    class="@HeaderClass(c => c.ManaCost)">
                    @DisplayName(c => c.ManaCost)
                    @Direction(c => c.ManaCost)
                </th>

                <th scope="col"
                    title="Order By Set Name"
                    @onclick="() => Filters.Reorder(c => c.SetName)" 
                    class="@HeaderClass(c => c.SetName)">
                    @DisplayName(c => c.SetName)
                    @Direction(c => c.SetName)
                </th>

                <th scope="col"
                    title="Order By Rarity"
                    @onclick="() => Filters.Reorder(c => c.Rarity)" 
                    class="@HeaderClass(c => c.Rarity)">
                    @DisplayName(c => c.Rarity)
                    @Direction(c => c.Rarity)
                </th>

                <th scope="col" 
                    title="Order By Number of Copies"
                    @onclick="() => Filters.Reorder(c => c.Amounts)" 
                    class="@HeaderClass(c => c.Amounts)">
                    Total Copies
                    @Direction(c => c.Amounts)
                </th>

                <AuthorizeView Policy="@CardPolicies.ChangeTreasury">
                    <th scope="col"></th>
                </AuthorizeView>
            </tr>
        </thead>

        <tbody>
            @foreach (var card in Cards)
            {
                <tr>
                    <td> <HoverCard Target="card"/> </td>

                    <td>
                        <div class="ms-group">
                            @MtgSymbols.Format(card.ManaCost).ToMarkupString()
                        </div>
                    </td>
                    <td> @card.SetName </td>
                    <td> @card.Rarity </td>
                    <td> @CardTotal(card) </td>

                    <AuthorizeView Policy="@CardPolicies.ChangeTreasury">
                        <td>
                            <a title="Suggest @card.Name"
                                href="/Transfers/Suggest/@card.Id"
                                class="btn btn-secondary"
                                role="button">
                                Suggest </a>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
</div>

<OffsetPaging Offset="Cards.Offset" PageSelected="SetPage">
</OffsetPaging>


@code
{
    public RenderFragment Direction<T>(Expression<Func<Card, T>> property)
    {
        bool invalid = IsBusy
            || Filters.OrderBy == null
            || property.Body is not MemberExpression memberExpr
            || memberExpr.Member.Name != Filters.OrderBy;

        return Filters.IsReversed switch
        {
            _ when invalid => @<text></text>,
            true => @<text>&#9650;</text>,
            false => @<text>&#9660;</text>
        };
    }


    public static string DisplayName<T>(Expression<Func<Card, T>> property) =>
        EntityExtensions.DisplayName(property);


    public string ColorActive(Color color) =>
        Filters.PickedColors.HasFlag(color) ? "active" : string.Empty;


    public string HeaderClass<T>(Expression<Func<Card, T>> property)
    {
        if (IsBusy)
        {
            return string.Empty;
        }
        else if (property.Body is MemberExpression memberExpr
            && memberExpr.Member.Name == Filters.OrderBy)
        {
            return "clickable btn-link font-weight-bold";
        }
        else
        {
            return "clickable btn-link";
        }
    }

    public void SetPage(int pageIndex) => Filters.PageIndex = pageIndex;
}
