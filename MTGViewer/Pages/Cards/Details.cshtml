@page "{id}"
@model Cards.DetailsModel
@{
    ViewData["Title"] = $"{Model.Card.Name} - Details";
}

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MTGViewer.Areas.Identity.Data

@inject IAuthorizationService AuthorizationService
@inject SymbolFormatter MtgSymbols
@inject MtgApiFlipQuery FlipQuery
@inject SignInManager<CardUser> SignInManager

@{ 
    bool hasAlts = Model.CardAlts.Any();
    bool hasFlip = FlipQuery.HasFlip(Model.Card.Name);

    bool isSignedIn = SignInManager.IsSignedIn(User);

    bool canChangeTreasury = (await AuthorizationService
        .AuthorizeAsync(User, CardPolicies.ChangeTreasury)).Succeeded;
}


<div class="row"> 
    <h1 class="h1 col-auto"> @Model.Card.Name </h1> 
    @{ var manaCost = Model.Card.Flip is not null ? Model.Card.Flip.ManaCost : Model.Card.ManaCost; }
    @if (manaCost is not null)
    {
        <div class="h5 m-0 pl-sm-0 pb-2 pb-sm-0 col-sm-auto col-12 d-flex align-items-center">
            @MtgSymbols.Format(manaCost).ToHtmlString()
        </div>
    }
</div>

@if (hasAlts || isSignedIn || hasFlip)
{
    <div class="btn-group" role="group">
        @if (hasAlts)
        {
            <div class="btn-group" role="group">

                <button id="alt-btn" type="button" class="btn btn-secondary dropdown-toggle"
                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" >
                    Alternate Versions
                </button>

                <div class="dropdown-menu" aria-labelledby="alt-btn">
                    @foreach (var card in Model.CardAlts)
                    {
                        <a class="dropdown-item" asp-route-id="@card.Id" >
                            @card.Name (@card.SetName) </a>
                    }
                </div>
            </div>
        }

        @if (isSignedIn && canChangeTreasury)
        {
            <a asp-page="Delete" 
                asp-route-id="@Model.Card.Id" asp-route-returnurl="@Model.ReturnUrl"
                title="Delete @Model.Card.Name" class="btn btn-danger" role="button">
                Delete </a>
        }
        else if (isSignedIn)
        {
            <button type="button" class="btn btn-danger" disabled>
                Delete </button>
        }

        @if (hasFlip)
        {
            bool flip = Model.Card.Flip is null;

            <a title="Flip @Model.Card.Name" class="btn btn-secondary"
                role="button" asp-route-flip="@flip">
                Flip </a>
        }
    </div>
}

<hr />
<div class="row">

    <div class="col-lg-3 col-12 pb-4 d-flex justify-content-center justify-content-lg-start align-items-center">
        @{ var imageUrl = Model.Card.Flip is not null ? Model.Card.Flip.ImageUrl : Model.Card.ImageUrl; }
        <img class="card-img" alt="@Model.Card.Name" src="@imageUrl.WithHttps()"/>
    </div>

    <div class="col">
        <dl class="row m-0">
                
            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Rarity)
            </dt>
            <dd class="col-md-9 col-7">
                @Html.DisplayFor(m => m.Card.Rarity)
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.SetName)
            </dt>
            <dd class="col-md-9 col-7">
                @Html.DisplayFor(m => m.Card.SetName)
            </dd>

            @if (Model.Card.Flip is not null)
            {
                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Cmc)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Flip.Cmc?.ToString() ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Flip!.Type)
                </dt>
                <dd class="col-md-9 col-7">
                    @Model.Card.Flip.Type
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Power)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Flip.Power ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Toughness)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Flip.Toughness ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Loyalty)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Flip.Loyalty ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Artist)
                </dt>
                <dd class="col-md-9 col-7">
                    @Model.Card.Flip.Artist
                </dd>
            }
            else
            {
                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Cmc)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Cmc?.ToString() ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Type)
                </dt>
                <dd class="col-md-9 col-7">
                    @Model.Card.Type
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Power)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Power ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Toughness)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Toughness ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Loyalty)
                </dt>
                <dd class="col-md-9 col-7">
                    @(Model.Card.Loyalty ?? "--")
                </dd>

                <dt class="col-md-3 col-5">
                    @Html.DisplayNameFor(m => m.Card.Artist)
                </dt>
                <dd class="col-md-9 col-7">
                    @Model.Card.Artist
                </dd>
            }

            @{ var text = Model.Card.Flip is not null ? Model.Card.Flip.Text : Model.Card.Text; }

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Text)
            </dt>

            @if (text == null)
            {
                <dd class="col-md-9 col-7"> -- </dd>
            }
            else
            {
                <dd class="col-md-9 col-12">
                    <span class="multiline">@MtgSymbols.Format(text).ToHtmlString()</span>
                </dd>
            }

            @{ var flavor = Model.Card.Flip is not null ? Model.Card.Flip.Flavor : Model.Card.Flavor; }

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Flavor)
            </dt>

            @if (flavor == null)
            {
                <dd class="col-md-9 col-7"> -- </dd>
            }
            else
            {
                <dd class="col-md-9 col-12">
                    <span class="multiline">@flavor</span>
                </dd>
            }


            <dt class="col-md-3 col-5 align-self-center">
                Location of Copies
            </dt>
            <dd class="col-md-9 col-12">
                <ul class="list-group list-group-horizontal-md d-flex py-1">
                    @foreach(var cardAmount in Model.Card.Amounts)
                    {
                        var location = cardAmount.Location;

                        <li class="list-group-item col-md-4 d-flex justify-content-between align-items-center">
                            @switch (location)
                            {
                                case Deck:
                                    <a asp-page="/Decks/Details" asp-route-id="@location.Id"> @location.Name </a>
                                    break;

                                case Box box when box.IsExcess:
                                    <a asp-page="/Treasury/Excess" asp-route-cardId="@Model.Card.Id" >
                                        @location.Name </a>
                                    break;

                                case Box:
                                    <a asp-page="/Treasury/Details" asp-route-id="@location.Id" asp-route-cardId="@Model.Card.Id">
                                        @location.Name </a>
                                    break;

                                case Unclaimed when canChangeTreasury:
                                    <a asp-page="/Unowned/Index" asp-route-id="@location.Id"> @location.Name </a>
                                    break;

                                default:
                                    @location.Name
                                    break;
                            }

                            <span class="ml-1 badge badge-secondary badge-pill">
                                @cardAmount.NumCopies
                            </span>
                        </li>
                    }
                </ul>
            </dd>

        </dl>
    </div>

</div>