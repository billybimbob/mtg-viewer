@page "{id}"
@model Cards.DetailsModel
@{
    ViewData["Title"] = $"{Model.Card.Name} - Details";
}

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MTGViewer.Areas.Identity.Data

@inject IAuthorizationService AuthorizationService
@inject SymbolFormatter MtgSymbols
@inject SignInManager<CardUser> SignInManager

@{ 
    bool canChangeTreasury = (await AuthorizationService
        .AuthorizeAsync(User, CardPolicies.ChangeTreasury)).Succeeded;
}


<div class="row"> 
    <h1 class="h1 col-auto"> @Model.Card.Name </h1> 
    <div class="h5 m-0 pl-sm-0 pb-2 pb-sm-0 col-sm-auto col-12 d-flex align-items-center">
        @MtgSymbols.Format(Model.Card.ManaCost).ToHtmlString()
    </div>
</div>

<div class="btn-group" role="group">
    @if (Model.CardAlts.Any())
    {
        <div class="btn-group" role="group">

            <button id="alt-btn" type="button" class="btn btn-secondary dropdown-toggle"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" >
                Alternate Versions
            </button>

            <div class="dropdown-menu" aria-labelledby="alt-btn">
                @foreach (var card in Model.CardAlts)
                {
                    <a class="dropdown-item" asp-page="Details" asp-route-id="@card.Id" >
                        @card.Name (@card.SetName)
                    </a>
                }
            </div>
        </div>
    }

    @if (SignInManager.IsSignedIn(User))
    {
        @if (canChangeTreasury)
        {
            <a asp-page="Delete" asp-route-id="@Model.Card.Id"
                title="Delete @Model.Card.Name" class="btn btn-danger" role="button">
                Delete </a>
        }
        else
        {
            <button type="button" class="btn btn-danger" disabled>
                Delete </button>
        }
    }
</div>

<hr />

<div class="row">

    <div class="col-lg-3 col-12 pb-4 d-flex justify-content-center justify-content-lg-start align-items-center">
        <img class="img-fluid" alt="@Model.Card.Name" src="@Model.Card.ImageUrl.WithHttps()"/>
    </div>

    <div class="col">
        <dl class="row m-0">

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Cmc)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Cmc?.ToString() ?? "--")
            </dd>
                
            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Rarity)
            </dt>
            <dd class="col-md-9 col-7">
                @Html.DisplayFor(m => m.Card.Rarity)
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.SetName)
            </dt>
            <dd class="col-md-9 col-7">
                @Html.DisplayFor(m => m.Card.SetName)
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Supertypes)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Supertypes.Any()
                    ? string.Join(" ", Model.Card.Supertypes.Select(st => st.Name))
                    : "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Types)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Types.Any()
                    ? string.Join(" ", Model.Card.Types.Select(st => st.Name))
                    : "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Subtypes)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Subtypes.Any() 
                    ? string.Join(" ", Model.Card.Subtypes.Select(st => st.Name))
                    : "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Power)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Power ?? "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Toughness)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Toughness ?? "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Loyalty)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Loyalty ?? "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Artist)
            </dt>
            <dd class="col-md-9 col-7">
                @(Model.Card.Artist ?? "--")
            </dd>

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Text)
            </dt>

            @if (Model.Card.Text == null)
            {
                <dd class="col-md-9 col-7"> -- </dd>
            }
            else
            {
                <dd class="col-md-9 col-12">
                    <span class="multiline">@MtgSymbols.Format(Model.Card.Text).ToHtmlString()</span>
                </dd>
            }

            <dt class="col-md-3 col-5">
                @Html.DisplayNameFor(m => m.Card.Flavor)
            </dt>

            @if (Model.Card.Flavor == null)
            {
                <dd class="col-md-9 col-7"> -- </dd>
            }
            else
            {
                <dd class="col-md-9 col-12">
                    <span class="multiline">@Model.Card.Flavor</span>
                </dd>
            }


            <dt class="col-md-3 col-5 align-self-center">
                Location of Copies
            </dt>
            <dd class="col-md-9 col-12">
                <ul class="list-group list-group-horizontal-md d-flex py-1">
                    @foreach(var cardAmount in Model.Card.Amounts)
                    {
                        var location = cardAmount.Location;

                        <li class="list-group-item col-md-4 d-flex justify-content-between align-items-center">
                            @switch (location)
                            {
                                case Deck:
                                    <a asp-page="/Decks/Details" asp-route-id="@location.Id"> @location.Name </a>
                                    break;

                                case Box box when box.IsExcess:
                                    <a asp-page="/Treasury/Excess" asp-route-cardId="@Model.Card.Id"> @location.Name </a>
                                    break;

                                case Box:
                                    <a asp-page="/Treasury/Details" asp-route-id="@location.Id"> @location.Name </a>
                                    break;

                                case Unclaimed when canChangeTreasury:
                                    <a asp-page="/Unowned/Index" asp-route-id="@location.Id"> @location.Name </a>
                                    break;

                                default:
                                    @location.Name
                                    break;
                            }

                            <span class="ml-1 badge badge-secondary badge-pill">
                                @cardAmount.NumCopies
                            </span>
                        </li>
                    }
                </ul>
            </dd>

        </dl>
    </div>

</div>