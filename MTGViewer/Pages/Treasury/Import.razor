@page "/Treasury/Import"
@attribute [Authorize]
@inherits OwningComponentBase

@using System.IO
@using Microsoft.Extensions.DependencyInjection
@using MTGViewer.Data.Internal

@inject ILogger<Import> Logger


<PageTitle> Treasury - Upload </PageTitle>

<h1> Upload Card Data </h1>
<hr />

<SavePrompt @bind-Result="_result">
    <SuccessMessage>
        Successfully added card data.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issue uploading card data.
    </ErrorMessage>
</SavePrompt>

<div class="row">
    <section class="col col-md-8">
        <p>
            Bulk fetch and add operations can be done via files. Currently, only .json files with
            the same format as the <a href="/Treasury/Export">exported .json format</a> and .csv files are supported.
        </p>
        <p>
            The .csv file format expects for a header with the format: <code>Name,MultiverseID,Quantity</code>.
        </p>
        <p>
            The uploading process may take a long time complete.
        </p>
    </section>
</div>

<div class="row">
    <section class="col col-md-5">
        <form @onsubmit="UploadAsync">
            <div class="form-group">
                <label for="import-file" class="sr-only">Card Data</label>

                <InputFile OnChange="FileChosen"
                    accept=".json,application/json,text/csv"
                    id="import-file" class="form-control-file" />

                @if (!string.IsNullOrWhiteSpace(FileError))
                {
                    <span class="text-danger"> @FileError </span>
                }
            </div>

            <button title="Upload Card Data" class="btn btn-secondary"
                type="submit" disabled="@(IsBusy || HasNoFile)">
                @if (IsBusy)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                }
                Upload
            </button>
        </form>
    </section>
</div>


@code
{
    public bool IsBusy => _isBusy;
    public string FileError => _fileError;
    public bool HasNoFile => _chosenImport == null;

    private const long _2_MB = 2_097_152;
    
    private readonly CancellationTokenSource _cancel = new();

    private bool _isBusy;
    private SaveResult _result;
    private string _fileError = string.Empty;
    private IBrowserFile? _chosenImport;


    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _cancel.Cancel();
            _cancel.Dispose();
        }

        base.Dispose(disposing);
    }
    

    public void FileChosen(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            _fileError = "Too many files selected";
            return;
        }

        var file = args.File;
        string ext = Path.GetExtension(file.Name).ToLowerInvariant();

        if (ext != ".json" && ext != ".csv")
        {
            _fileError = "File is not the correct type";
            return;
        }

        string content = file.ContentType;

        if (content != ".json" 
            && content != "application/json"
            && content != "text/csv")
        {
            _fileError = "File is not the correct type";
            return;
        }

        if (file.Size > _2_MB)
        {
            _fileError = "File is too large";
            return;
        }

        _fileError = string.Empty;
        _chosenImport = file;
    }


    public async Task UploadAsync()
    {
        if (_isBusy || _chosenImport is null)
        {
            return;
        }

        _isBusy = true;
        _result = SaveResult.None;

        try
        {
            var fileStorage = ScopedServices.GetRequiredService<FileCardStorage>();

            await using var fileStream = _chosenImport.OpenReadStream(_2_MB, _cancel.Token);

            switch (Path.GetExtension(_chosenImport.Name).ToLowerInvariant())
            {
                case ".json":
                    await fileStorage.JsonAddAsync(fileStream, _cancel.Token);
                    break;

                case ".csv":
                    await fileStorage.CsvAddAsync(fileStream, _cancel.Token);
                    break;
            }

            _result = SaveResult.Success;
        }
        catch (Exception e)
        {
            Logger.LogError(e.ToString());

            _result = SaveResult.Error;
        }
        finally
        {
            _isBusy = false;
        }
    }
}