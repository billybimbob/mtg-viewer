@page "/Treasury/Import"
@attribute [Authorize]
@attribute [Authorize(Policy = CardPolicies.ChangeTreasury)]
@inherits OwningComponentBase

@using System.IO
@using Microsoft.Extensions.DependencyInjection
@using MTGViewer.Data.Internal
@using MTGViewer.Areas.Identity.Data

@inject ILogger<Import> Logger


<PageTitle> Treasury - Upload </PageTitle>

<h1> Upload Card Data </h1>
<hr />

@if (IsBusy)
{
    <ProgressBar Percent="PercentProgress" />
}

<SavePrompt @bind-Result="_result">
    <SuccessMessage>
        Successfully added card data.
    </SuccessMessage>
    <ErrorMessage>
        Ran into issue uploading card data.
    </ErrorMessage>
</SavePrompt>

<div class="row">
    <div class="col-12 col-md-8">
        <p>
            Bulk fetch and add operations can be done via files. Currently, only .json files with
            the same format as the <a href="/Treasury/Export">exported .json format</a> and .csv files are supported.
            The uploading process may take a long to time complete.
        </p>
        <p>
            The .csv file format expects for a header with the format: <code>Name,MultiverseID,Quantity</code>.
        </p>
        <p>
            <i>Warning</i> if you navigate to a different page, the current card import will be cancelled.
        </p>
    </div>
    <div class="col-12 col-md-5">
        <form @onsubmit="UploadAsync">
            <div class="form-group">
                <InputFile OnChange="FileChosen"
                    accept=".json,application/json,text/csv"
                    class="form-control-file" />

                @if (!string.IsNullOrWhiteSpace(FileError))
                {
                    <span class="text-danger"> @FileError </span>
                }
            </div>

            <div class="btn-group" role="group">
                <button title="Cancel Upload" class="btn btn-danger" type="button" 
                    @onclick="CancelUpload" disabled="@(!IsBusy || HasNoFile || IsCancelled)">
                    Cancel
                </button>
                <button title="Upload Card Data" class="btn btn-secondary"
                    type="submit" disabled="@(IsBusy || HasNoFile)">
                    @if (IsBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                    }
                    Upload
                </button>
            </div>
        </form>
    </div>
</div>


@code
{
    public bool IsBusy => _isBusy;
    public bool IsCancelled => _isCancelRaised;

    public string FileError => _fileError;
    public bool HasNoFile => _chosenImport == null;

    public Percent PercentProgress => _percentProgress;


    private const long _3_MB = 3_145_728;
    
    private CancellationTokenSource? _cancel = new();

    private bool _isBusy;
    private bool _isCancelRaised;
    private SaveResult _result;
    private Percent _percentProgress;

    private string _fileError = string.Empty;
    private IBrowserFile? _chosenImport;


    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _cancel?.Cancel();
            _cancel?.Dispose();
            _cancel = null;
        }

        base.Dispose(disposing);
    }
    

    public void FileChosen(InputFileChangeEventArgs args)
    {
        if (args.FileCount > 1)
        {
            _fileError = "Too many files selected";
            return;
        }

        var file = args.File;
        string ext = Path.GetExtension(file.Name).ToLowerInvariant();

        if (ext != ".json" && ext != ".csv")
        {
            _fileError = "File is not the correct type";
            return;
        }

        string content = file.ContentType;

        if (content != ".json" 
            && content != "application/json"
            && content != "application/vnd.ms-excel"
            && content != "text/csv")
        {
            _fileError = "File is not the correct type";
            return;
        }

        if (file.Size > _3_MB)
        {
            _fileError = "File is too large";
            return;
        }

        _fileError = string.Empty;
        _chosenImport = file;
    }


    public async Task UploadAsync()
    {
        if (_isBusy || _chosenImport is null)
        {
            return;
        }

        if (_cancel?.Token is not CancellationToken cancelToken)
        {
            return;
        }

        var loadingProgress = ScopedServices.GetRequiredService<LoadingProgress>();

        _isBusy = true;
        _result = SaveResult.None;
        _percentProgress = 0;

        loadingProgress.ProgressUpdate += UploadProgress;

        try
        {
            var fileStorage = ScopedServices.GetRequiredService<FileCardStorage>();

            await using var fileStream = _chosenImport.OpenReadStream(_3_MB, cancelToken);

            switch (Path.GetExtension(_chosenImport.Name).ToLowerInvariant())
            {
                case ".json":
                    await fileStorage.JsonAddAsync(fileStream, cancelToken);
                    break;

                case ".csv":
                    await fileStorage.CsvAddAsync(fileStream, cancelToken);
                    break;
            }

            _chosenImport = null;
            _result = SaveResult.Success;
        }
        catch (Exception e)
        {
            Logger.LogError(e.ToString());

            _result = SaveResult.Error;
        }
        finally
        {
            loadingProgress.ProgressUpdate -= UploadProgress;

            _isCancelRaised = false;
            _isBusy = false;
        }
    }


    private void UploadProgress(Percent percent)
    {
        if (percent <= _percentProgress)
        {
            return;
        }

        _percentProgress = percent;

        StateHasChanged();
    }


    public void CancelUpload()
    {
        if (!_isBusy
            || HasNoFile 
            || _isCancelRaised
            || _cancel is null)
        {
            return;
        }

        _cancel.Cancel();
        _cancel.Dispose();
        _cancel = new();

        _isCancelRaised = true;
    }
}