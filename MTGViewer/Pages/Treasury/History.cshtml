@page "{pageIndex:int?}"
@model Treasury.HistoryModel
@{
    ViewData["Title"] = "Treasury History";
}

<h1>Changes To Treasury</h1>

<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col"> @Html.DisplayNameForInnerType((Transaction t) => t.AppliedAt) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.From) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.To) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Card) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Amount) </th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (transaction, from, to, changes) in Model.Transfers)
        {
            var transferKey = (transaction.Id, from?.Id, to.Id);
            var isFirstTransfer = Model.IsFirstTransfer.Contains(transferKey);
            var first = changes.First();

            <tr>
                @if (isFirstTransfer)
                {
                    <th scope="rowgroup" rowspan="@transaction.Changes.Count"> @transaction.AppliedAt </th>
                }

                <td rowspan="@changes.Count">
                    @switch (from)
                    {
                        case Deck:
                            <a asp-page="/Decks/Viewer" asp-route-id="@from.Id"> @from.Name </a>
                            break;

                        case Box:
                            <a asp-page="/Treasury/Index" asp-route-id="@from.Id"> @from.Name </a>
                            break;

                        case Unclaimed:
                            <a asp-page="Unclaimed" asp-route-id="@from.Id"> @from.Name </a>
                            break;

                        case null:
                            <i>Added</i>
                            break;

                        default:
                            @from.Name
                            break;
                    }
                </td>
                
                <td rowspan="@changes.Count">
                    @switch (to)
                    {
                        case Deck:
                            <a asp-page="Viewer" asp-route-id="@to.Id"> @to.Name </a>
                            break;

                        case Box:
                            <a asp-page="/Treasury/Index" asp-route-id="@to.Id"> @to.Name </a>
                            break;

                        case Unclaimed:
                            <a asp-page="/Unowned/Index" asp-route-id="@to.Id"> @to.Name </a>
                            break;

                        case null:
                            <i> Added </i>
                            break;
                        
                        default:
                            @to.Name
                            break;
                    }
                </td>

                <td>
                    @(await Html.RenderComponentAsync<HoverCard>(
                        RenderMode.Static, new { first.Card }))
                </td>

                <td> @first.Amount </td>

                @if ( Model.IsSignedIn
                    && isFirstTransfer 
                    && Model.IsSharedTransaction.Contains(transaction.Id))
                {
                    <td rowspan="@transaction.Changes.Count" class="text-center">
                        <form method="POST">
                            <input type="hidden" name="transactionId" value="@transaction.Id"/>
                            <button title="Remove Record" type="submit" class="btn btn-danger"> &times; </button>
                        </form>
                    </td>
                }
            </tr>

            @foreach (var change in changes.Skip(1))
            {
                <tr>
                    <td> 
                        @(await Html.RenderComponentAsync<HoverCard>(
                            RenderMode.Static, new { change.Card }))
                    </td>
                    <td> @change.Amount </td>
                </tr>
            }
        }
    </tbody>
</table>

@await Html.PartialAsync("_PaginationPartial", Model.Pages)