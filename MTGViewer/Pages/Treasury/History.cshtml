@page "{pageIndex:int?}"
@model Treasury.HistoryModel
@{
    ViewData["Title"] = $"Treasury - History ({Model.Pages})";
}

@using Microsoft.AspNetCore.Identity
@using MTGViewer.Areas.Identity.Data

@inject SignInManager<CardUser> SignInManager

<h1>Changes To Treasury</h1>

<div class="table-responsive-md">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Transaction t) => t.AppliedAt) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.From) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.To) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Amount) </th>

                @if (SignInManager.IsSignedIn(User))
                {
                    <th scope="col"></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var transfer in Model.Transfers)
            {
                var (transaction, from, to, changes) = transfer;
                var first = changes.First();

                <tr>
                    @if (Model.IsFirstTransfer(transfer))
                    {
                        <th scope="rowgroup" rowspan="@transaction.Changes.Count">
                            @transaction.AppliedAt
                        </th>
                    }

                    <td rowspan="@changes.Count">
                        @switch (from)
                        {
                            case Deck:
                                <a asp-page="/Decks/Viewer" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case Box:
                                <a asp-page="/Treasury/Index" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case Unclaimed:
                                <a asp-page="Unclaimed" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case null:
                                <i>Added</i>
                                break;

                            default:
                                @from.Name
                                break;
                        }
                    </td>
                    
                    <td rowspan="@changes.Count">
                        @switch (to)
                        {
                            case Deck:
                                <a asp-page="/Decks/Viewer" asp-route-id="@to.Id"> @to.Name </a>
                                break;

                            case Box:
                                <a asp-page="/Treasury/Index" asp-route-id="@to.Id"> @to.Name </a>
                                break;

                            case Unclaimed:
                                <a asp-page="/Unowned/Index" asp-route-id="@to.Id"> @to.Name </a>
                                break;

                            case null:
                                <i> -- </i>
                                break;
                            
                            default:
                                @to.Name
                                break;
                        }
                    </td>

                    <td>
                        <component type="typeof(HoverCard)" render-mode="Static"
                            param-Target="first.Card"/>
                    </td>

                    <td> @first.Amount </td>

                    @if (SignInManager.IsSignedIn(User)
                        && Model.IsFirstTransfer(transfer)
                        && Model.IsShared(transaction))
                    {
                        <td rowspan="@transaction.Changes.Count" class="text-center">
                            <form method="POST">
                                <input type="hidden" name="transactionId" value="@transaction.Id"/>
                                <button title="Remove Record" type="submit" class="btn btn-danger"> &times; </button>
                            </form>
                        </td>
                    }
                </tr>

                @foreach (var change in changes.Skip(1))
                {
                    <tr>
                        <td> 
                            <component type="typeof(HoverCard)" render-mode="Static"
                                param-Target="change.Card"/>
                        </td>
                        <td> @change.Amount </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<partial name="_PaginationPartial" for="Pages"/>