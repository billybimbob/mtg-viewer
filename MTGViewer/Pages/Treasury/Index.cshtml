@page "{pageIndex:int?}"
@model Treasury.IndexModel
@{
    ViewData["Title"] = "Treasury";
}
@inject SymbolFormatter MtgSymbols


<h1>Treasury</h1>

<form method="POST" class="mb-3">
    <a asp-page="Create" class="btn btn-secondary"> Add Box </a>

    @if (Model.IsSignedIn)
    {
        <input type="submit" class="btn btn-secondary" value="Optimize" />
    }

    <a asp-page="History" class="btn btn-secondary"> History </a>
</form>

@if (!string.IsNullOrEmpty(Model.PostMessage))
{
    <div class="alert alert-secondary" role="alert">
        @Model.PostMessage
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col"> Box </th>
            <th scope="col"> @Html.DisplayNameForInnerType((CardAmount ca) => ca.Card) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.Rarity) </th>
            <th scope="col"> Current Amount </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var box in Model.Boxes)
        {
            var firstAmount = box.Cards.FirstOrDefault();
            var boxSpan = Math.Max(1, box.Cards.Count);

            <tr>
                <th scope="rowgroup" rowspan="@boxSpan"> @box.Name (@box.Bin.Name) </th>

                @if (firstAmount != default)
                {
                    <td>
                        <a asp-page="/Cards/Details" asp-route-id="@firstAmount.CardId">
                            @firstAmount.Card.Name </a>
                    </td>

                    <td> @(MtgSymbols.Format(firstAmount.Card.ManaCost).ToHtmlString()) </td>
                    <td> @firstAmount.Card.SetName </td>
                    <td> @firstAmount.Card.Rarity </td>
                    <td> @firstAmount.Amount </td>
                }
                else
                {
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                }
            </tr>

            @foreach (var amount in box.Cards.Skip(1))
            {
                <tr>
                    <td>
                        <a asp-page="/Cards/Details" asp-route-id="@amount.CardId">
                            @amount.Card.Name </a>
                    </td>
                    <td> @(MtgSymbols.Format(amount.Card.ManaCost).ToHtmlString()) </td>
                    <td> @amount.Card.SetName </td>
                    <td> @amount.Card.Rarity </td>
                    <td> @amount.Amount </td>
                </tr>
            }
        }
    </tbody>
</table>


@if (Model.Boxes.Pages.HasMultiple)
{
    var pages = Model.Boxes.Pages;
    var prevDisabled = pages.HasPrevious ? "" : "disabled";
    var nextDisabled = pages.HasNext ? "" : "disabled";

    <nav aria-label="Box History Pages">
        <ul class="pagination justify-content-center">

            <li class="page-item @prevDisabled">
                @if (pages.HasPrevious)
                {
                    <a asp-page="Create" 
                        asp-route-pageIndex="@(pages.Current - 1)"
                        class="page-link">
                        &laquo; </a>
                }
                else
                {
                    <span class="page-link"> &laquo; </span>
                }
            </li>

            @for (int i = 0; i < pages.Total; ++i)
            {
                var pageIndex = i;
                var activePage = pageIndex == pages.Current ? "active" : "";

                <li class="page-item @activePage">
                    @if (pageIndex != pages.Current)
                    {
                        <a asp-page="Create"
                            asp-route-pageIndex="@pageIndex"
                            class="page-link">
                            @(pageIndex + 1) </a>
                    }
                    else
                    {
                        <span class="page-link">
                            @(pageIndex + 1)
                            <span class="sr-only">(current)</span>
                        </span>
                    }
                </li>
            }

            <li class="page-item @nextDisabled">
                @if (pages.HasNext)
                {
                    <a asp-page="Create"
                        asp-route-pageIndex="@(pages.Current + 1)"
                        class="page-link">
                        &raquo; </a>
                }
                else
                {
                    <span class="page-link"> &raquo; </span>
                }
            </li>

        </ul>
    </nav>
}