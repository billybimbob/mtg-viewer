@page "/Treasury/Adjust/{BoxId:int?}"
@using System.ComponentModel.DataAnnotations
@using MTGViewer.Data.Internal

<PageTitle>
    @if (Box.IsEdit)
    {
        <text> Edit @Box.Name </text>
    }
    else
    {
        <text> Add New Box </text>
    }
</PageTitle>

<h1>
    @if (Box.IsEdit)
    {
        <text> Edit <a href="/Treasury/Details/@Box.Id"> @Box.Name </a> </text>
    }
    else
    {
        <text> Add New Box </text>
    }
</h1>
<hr />

<SavePrompt @bind-Result="Result">
    <SuccessMessage>
        @if (Box.IsEdit)
        {
            <text> @Box.Name was successfully updated. </text>
        }
        else
        {
            <text> New box was successfully added. </text>
        }
    </SuccessMessage>
    <ErrorMessage>
        Ran into issues while try to
        @if (Box.IsEdit)
        {
            <text> update @Box.Name </text>
        }
        else
        {
            <text> add a new Box. </text>
        }
    </ErrorMessage>
</SavePrompt>

<EditForm Model="@Box" OnValidSubmit="ValidBoxSubmittedAsync">
    <ObjectGraphDataAnnotationsValidator />

    <div class="row">
        <div class="col-12 col-md-8 col-lg-5 order-lg-last">
            <ValidationSummary role="alert" />
        </div>

        <div class="col col-md-8 col-lg-4">

            <div class="form-group">
                <label for="@BoxDto.PropertyId(b => b.Name)">
                    @Box.DisplayName(b => b.Name)
                </label>
                <InputText @bind-Value="Box.Name" 
                    id="@BoxDto.PropertyId(b => b.Name)" class="form-control" />
            </div>

            <div class="form-group">
                <label for="@BoxDto.PropertyId(b => b.Bin)">
                    @Box.DisplayName(b => b.Bin)
                </label>
                <select @onchange="BinSelected" id="@BoxDto.PropertyId(b => b.Bin)" class="form-control">
                    <option value="0" selected="@(!Box.Bin.IsEdit)"> Create New </option>

                    @foreach (var bin in Bins)
                    {
                        <option value="@bin.Id" selected="@(bin.Id == Box.Bin.Id)"> @bin.Name </option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="@BinDto.PropertyId(b => b.Name)">
                    @if (!Box.Bin.IsEdit)
                    {
                        <text>
                            New @Box.DisplayName(b => b.Bin) @Box.Bin.DisplayName(b => b.Name)
                        </text>
                    }
                    else if (Box.IsEdit)
                    {
                        <text>
                            Change @Box.Bin.Name's @Box.Bin.DisplayName(b => b.Name)
                        </text>
                    }
                    else
                    {
                        <text>
                            @Box.DisplayName(b => b.Bin) @Box.Bin.DisplayName(b => b.Name)
                        </text>
                    }
                </label>
                <InputText @bind-Value="@Box.Bin.Name"
                    readonly="@(!Box.IsEdit && Box.Bin.IsEdit)"
                    id="@BinDto.PropertyId(b => b.Name)" class="form-control" />
            </div>

            <div class="form-group">
                <label for="@BoxDto.PropertyId(b => b.Appearance)">
                    @Box.DisplayName(b => b.Appearance)
                </label>
                <InputTextArea @bind-Value="Box.Appearance"
                    id="@BoxDto.PropertyId(b => b.Appearance)" class="form-control" />
            </div>


            <div class="form-group">
                <label for="@BoxDto.PropertyId(b => b.Capacity)">
                    @Box.DisplayName(b => b.Capacity)
                </label>
                <InputNumber @bind-Value="Box.Capacity" min=0
                    id="@BoxDto.PropertyId(b => b.Capacity)" class="form-control" />
            </div>

            <div class="btn-group" role="group">
                <button class="btn btn-secondary" type="submit" disabled="@IsBusy">
                    @if (IsBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                    }
                    @if (Box.IsEdit)
                    {
                        <text> Update </text>
                    }
                    else
                    {
                        <text> Add </text>
                    }
                </button>
            </div>
        </div>
    </div>
</EditForm>


@code
{
    public sealed class BoxDto
    {
        public BoxDto()
        {
            Bin = new(this);
        }

        public int Id { get; set; }

        public bool IsEdit => Id != default;

        [Required(ErrorMessage = "Box Name is Missing")]
        [StringLength(20, ErrorMessage = "Box Name has a character limit of 20")]
        public string? Name { get; set; }

        [StringLength(40, ErrorMessage = "Appearance has a character limit of 40")]
        public string? Appearance{ get; set; }

        [Range(10, 10_000, ErrorMessage = "Capacity must be Between 10 and 10,000")]
        public int Capacity { get; set; }

        [ValidateComplexType]
        public BinDto Bin { get; }


        public static string PropertyId<T>(Expression<Func<BoxDto, T>> property)
        {
            if (property.Body is not MemberExpression expression)
            {
                return string.Empty;
            }

            return $"{nameof(BoxDto)}-{expression.Member.Name}";
        }
    }


    public sealed class BinDto
    {
        private BoxDto _box;
        private string? _name;

        public BinDto(BoxDto box)
        {
            _box = box;
        }

        public int Id { get; set; }

        [Required(ErrorMessage = "Bin Name is Missing")]
        [StringLength(10, ErrorMessage = "Bin Name has a character limit of 10")]
        public string? Name
        {
            get => _name;
            set
            {
                if (_box.IsEdit || !IsEdit)
                {
                    _name = value;
                }
            }
        }

        public bool IsEdit => Id != default;

        public void Update(Bin? bin)
        {
            if (bin == default)
            {
                Id = default;
                _name = null;
            }
            else
            {
                Id = bin.Id;
                _name = bin?.Name;
            }
        }


        public static string PropertyId<T>(Expression<Func<BinDto, T>> property)
        {
            if (property.Body is not MemberExpression expression)
            {
                return string.Empty;
            }

            return $"{nameof(BinDto)}-{expression.Member.Name}";
        }
    }
}
