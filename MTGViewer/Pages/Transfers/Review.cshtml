@page "{id:int}"
@model Transfers.ReviewModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} - Received Trades ({Model.Trades.Offset})";
}
@inject SymbolFormatter MtgSymbols
@inject CardText CardText


<h1>Trades From @Model.Deck.Name</h1>
<hr />


<h2>Received Trades</h2>

<div class="table-responsive-md">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Trade t) => t.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                <th scope="col"> Requested By </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Trade t) => t.To) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Deck d) => d.Color) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Trade t) => t.Copies) </th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trade in Model.Trades)
            {
                <tr>
                    <td>
                        <component type="typeof(HoverCard)" render-mode="Static"
                            param-Preview="trade.Card" />
                    </td>

                    <td> @trade.Card.SetName </td>
                    <td> @trade.Target.Owner.Name </td>
                    <td>
                        <a asp-page="/Decks/Details" asp-route-id="@trade.Target.Id">
                            @trade.Target.Name </a>
                    </td>

                    <td> 
                        <div class="ms-group">
                            @MtgSymbols.Format(CardText.ColorString(trade.Target.Color)).ToHtmlString() 
                        </div>
                    </td>

                    <td>
                        <form method="POST" id="review-action">
                            <input type="hidden" name="tradeId" value="@trade.Id" />

                            <select title="trade amount" name="amount" 
                                class="form-control form-control-sm">

                                @for (int i = 1; i < trade.Copies; ++i)
                                {
                                    <option>@i</option>
                                }
                                <option selected>@trade.Copies</option>
                            </select>
                        </form>

                    </td>
                    <td class="btn-group">
                        <button type="submit" asp-page-handler="Accept"
                            form="review-action" class="btn btn-secondary">
                            Accept </button>

                        <button type="submit" asp-page-handler="Reject"
                            form="review-action" class="btn btn-danger" >
                            &times; </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<partial name="_OffsetPagingPartial" for="Trades.Offset"/>


<h3>
    <a asp-page="/Decks/Details" asp-route-id="@Model.Deck.Id">
        Current Cards
    </a>
</h3>

<div class="table-responsive-md">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Hold ca) => ca.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                <th scope="col"> Held </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in Model.Cards)
            {
                <tr>
                    <td>
                        <a asp-page="/Cards/Details" asp-route-id="@card.Id">
                            @card.Name </a>
                    </td>
                    <td> 
                        <div class="ms-group">
                            @MtgSymbols.Format(card.ManaCost).ToHtmlString() 
                        </div>
                    </td>
                    <td> @card.SetName </td>
                    <td> @card.Held </td>
                </tr>
            }
            @if (Model.Deck.HeldCopies > Model.Cards.Sum(dl => dl.Held))
            {
                <tr>
                    <td> ... </td>
                    <td> ... </td>
                    <td> ... </td>
                    <td> ... </td>
                    <td> ... </td>
                </tr>
            }
        </tbody>
    </table>
</div>