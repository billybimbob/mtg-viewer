@page "{pageIndex:int?}"
@using MTGViewer.Data
@model MTGViewer.Pages.Decks.IndexModel

@{
    ViewData["Title"] = $"Decks - {Model.CardUser.Name}";
}


@if (!string.IsNullOrEmpty(Model.PostMessage))
{
    <div class="alert alert-secondary" role="alert">
        @Model.PostMessage
    </div>
}

 
<h1>@Model.CardUser.Name's Decks</h1>

<a class="btn btn-secondary mb-3" asp-page="./Builder">New Deck</a>

<table class="table">
    <thead>
        <tr>
            <th>
                Deck @Html.DisplayNameForInnerType((Deck d) => d.Name)
            </th>
            <th>Colors</th>
            <th>Number of Cards</th>
            <th>State</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (deck, state) in Model.Decks)
        {
            <tr>
                <td>
                    @if (state is State.Requesting)
                    {
                        <a asp-page="Viewer"
                           asp-route-id="@deck.Id"
                           class="fw-bold">
                           @deck.Name </a>
                    }
                    else
                    {
                        <a asp-page="Builder"
                           asp-route-id="@deck.Id"
                           class="fw-bold">
                           @deck.Name </a>
                    }
                </td>

                <td>
                    @foreach (var color in deck.GetColorSymbols())
                    {
                        <span class="m-1 ms ms-@color ms-cost"></span>
                    }
                </td>

                <td> @deck.Cards.Sum(ca => ca.Amount) </td>

                <td>
                    @if (state is State.Requesting)
                    {
                        <a asp-page="/Transfers/Status"
                           asp-route-deckid="@deck.Id"
                           class="fw-bold">
                           @state.ToString() </a>
                    }
                    else if (state is State.Theorycraft)
                    {
                        <a asp-page="Checkout"
                           asp-route-id="@deck.Id"
                           class="fw-bold">
                           @state.ToString() </a>
                    }
                    else
                    {
                        @state.ToString()
                    }
                </td>
                
                <td>
                    <a asp-page="History"
                        asp-route-id="@deck.Id"
                        class="btn btn-secondary">
                        History </a>

                    <a asp-page="Delete"
                        asp-route-id="@deck.Id"
                        class="btn btn-danger">
                        Delete </a>
                </td>
            </tr>
        }
    </tbody>
</table>


@{
    var pages = Model.Decks.Pages;
    var prevDisabled = pages.HasPrevious ? "" : "disabled";
    var nextDisabled = pages.HasNext ? "" : "disabled";
}

@if (pages.HasMultiple)
{
    <nav aria-label="Deck Pages">
        <ul class="pagination justify-content-center">

            <li class="page-item @prevDisabled">
                @if (pages.HasPrevious)
                {
                    <a asp-page="Index" 
                        asp-route-pageIndex="@(pages.Current - 1)"
                        class="page-link">
                        Previous </a>
                }
                else
                {
                    <span class="page-link">Previous</span>
                }
            </li>

            @for (int i = 0; i < pages.Total; ++i)
            {
                var pageIndex = i;
                var activePage = pageIndex == pages.Current ? "active" : "";

                <li class="page-item @activePage">
                    @if (pageIndex != pages.Current)
                    {
                        <a asp-page="Index"
                            asp-route-pageIndex="@pageIndex"
                            class="page-link">
                            @(pageIndex + 1) </a>
                    }
                    else
                    {
                        <span class="page-link">
                            @(pageIndex + 1)
                            <span class="sr-only">(current)</span>
                        </span>
                    }
                </li>
            }

            <li class="page-item @nextDisabled">
                @if (pages.HasNext)
                {
                    <a asp-page="Index"
                        asp-route-pageIndex="@(pages.Current + 1)"
                        class="page-link">
                        Next </a>
                }
                else
                {
                    <span class="page-link">Next</span>
                }
            </li>

        </ul>
    </nav>
}