@page
@model Decks.IndexModel
@{
    ViewData["Title"] = $"{Model.UserName} - Decks";
}

@using Microsoft.AspNetCore.Authorization
@using MTGViewer.Areas.Identity.Data

@inject IAuthorizationService AuthorizationService
@inject SymbolFormatter MtgSymbols

@{
    bool canChangeTreasury = (await AuthorizationService
        .AuthorizeAsync(User, CardPolicies.ChangeTreasury)).Succeeded;
}

 
<h1>@Model.UserName's Decks</h1>

<a href="/Decks/Craft" class="btn btn-secondary mb-3" role="button">New Deck</a>

<div class="table-responsive-md">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Deck d) => d.Name) </th>
                <th scope="col"> Colors </th>
                <th scope="col"> Number of Cards </th>
                <th scope="col"> State </th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deck in Model.Decks)
            {
                var state = Model.GetDeckState(deck);
                <tr>
                    <td>
                        <a asp-page="Details" asp-route-id="@deck.Id">
                            @deck.Name </a>
                    </td>

                    <td>
                        <div class="ms-group">
                            @MtgSymbols.Format(deck.Colors).ToHtmlString()
                        </div>
                    </td>
                    <td> @deck.Cards.Sum(a => a.NumCopies) </td>

                    <td>
                        @if (state is IndexModel.State.Requesting && canChangeTreasury)
                        {
                            <a asp-page="/Transfers/Status" asp-route-deckid="@deck.Id">
                                @state.ToString() </a>
                        }
                        else if (state is IndexModel.State.Theorycraft && canChangeTreasury)
                        {
                            <a asp-page="Exchange" asp-route-id="@deck.Id">
                                @state.ToString() </a>
                        }
                        else
                        {
                            @state.ToString()
                        }
                    </td>
                    
                    <td class="btn-group" role="group">
                        @if (state is not IndexModel.State.Requesting && canChangeTreasury)
                        {
                            <a href="/Decks/Craft/@deck.Id"
                                class="btn btn-secondary" role="button">
                                Edit </a>
                        }
                        else
                        {
                            <button class="btn btn-secondary" type="button" disabled> Edit </button>
                        }

                        <a asp-page="History" asp-route-id="@deck.Id"
                            class="btn btn-secondary" role="button">
                            History </a>

                        @if (canChangeTreasury)
                        {
                            <a asp-page="Delete" asp-route-id="@deck.Id"
                                class="btn btn-danger" role="button">
                                Delete </a>
                        }
                        else
                        {
                            <button class="btn btn-danger" type="button" disabled>
                                Delete </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<component type="typeof(SeekPaging<Deck>)" render-mode="Static" param-Seek="Model.Decks.Seek" />
