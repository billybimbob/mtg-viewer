@page "{id:int}"
@model Decks.DeleteModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} - Delete";
}
@inject SymbolFormatter MtgSymbols


<h1>Delete @Model.Deck.Name</h1>
<hr />

<div class="alert alert-warning" role="alert">
    <h5 class="alert-heading">Are you sure you want to delete this deck?</h5>
    <p>
        All current cards in the deck will be automatically returned 
        to the Treasury
    </p>

    <form method="POST">
        <div class="btn-group" role="group">
            <a asp-page="Details" asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Cancel </a>

            <input type="submit" value="Delete" class="btn btn-danger" />
        </div>
    </form>
</div>

@if (Model.Deck.HasTrades)
{
    <div class="mt-2 alert alert-danger" role="alert">
        <h5 class="alert-heading">Active Trades</h5>
        <p class="mb-0"> 
            There are currently active trades for @Model.Deck.Name that will also be deleted.
        </p>
    </div>
}

<div class="table-responsive-md">
    <table class="table mt-2">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Hold ca) => ca.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                <th scope="col"> Held </th>
                <th scope="col"> Wanted </th>
                <th scope="col"> Returning </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var card in Model.Cards)
            {
                <tr>
                    <td>
                        <a asp-page="/Cards/Details" asp-route-id="@card.Id">
                            @card.Name </a>
                    </td>
                    <td>
                        <div class="ms-group">
                            @MtgSymbols.Format(card.ManaCost).ToHtmlString()
                        </div>
                    </td>
                    <td>@card.SetName</td>

                    <td>@card.Held</td>
                    <td>@card.Want</td>
                    <td>@card.Returning</td>
                </tr>
            }
                @if (Model.Deck.HeldCopies > Model.Cards.Sum(c => c.Held)
                    || Model.Deck.WantCopies > Model.Cards.Sum(c => c.Want)
                    || Model.Deck.ReturnCopies > Model.Cards.Sum(c => c.Returning))
                {
                    <tr>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                    </tr>
                }
                <tr>
                    <th> Total </th>
                    <td> -- </td>
                    <td> -- </td>
                    <td> <strong>@Model.Deck.HeldCopies</strong> </td>
                    <td> <strong>@Model.Deck.WantCopies</strong> </td>
                    <td> <strong>@Model.Deck.ReturnCopies</strong> </td>
                </tr>
        </tbody>
    </table>
</div>
