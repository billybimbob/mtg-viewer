@page "{id:int}"
@model Decks.HistoryModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} - History";
}

@using Microsoft.AspNetCore.Authorization
@using MTGViewer.Areas.Identity.Data
@using MTGViewer.Data.Internal

@inject IAuthorizationService AuthorizationService

@{ 
    bool canChangeTreasury = (await AuthorizationService
        .AuthorizeAsync(User, CardPolicies.ChangeTreasury)).Succeeded;
}


<h1>
    Changes To
    <a asp-page="Details" asp-route-id="@Model.Deck.Id">
        @Model.Deck.Name </a>
</h1>

<partial name="_TimeZonePartial" for="TimeZone"/>


<div class="table-responsive-md">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Transaction t) => t.AppliedAt) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.From) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.To) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Copies) </th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @if (!Model.Transfers.Any())
            {
                <tr>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                </tr>
            }
            @foreach (var (transaction, to, from, changes) in Model.Transfers)
            {
                <tr>
                    @if (Model.IsFirstTransfer(transaction, to, from))
                    {
                        <th scope="rowgroup" rowspan="@Model.GetTransactionCount(transaction)">
                            @TimeZoneInfo.ConvertTimeFromUtc(transaction.AppliedAt, Model.TimeZone)
                        </th>
                    }

                    <td rowspan="@changes.Count">
                        @switch (from?.Type)
                        {
                            case LocationType.Deck when from.Id != Model.Deck.Id:
                                <a asp-page="Details" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case LocationType.Unclaimed when canChangeTreasury:
                                <a asp-page="/Unowned/Index" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case LocationType.Excess:
                                <a asp-page="/Treasury/Excess" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case LocationType.Box:
                                <a asp-page="/Treasury/Details" asp-route-id="@from.Id"> @from.Name </a>
                                break;

                            case null:
                                <i> Added </i>
                                break;
                            
                            default:
                                @from.Name
                                break;
                        }
                    </td>

                    <td rowspan="@changes.Count">
                        @switch (to.Type)
                        {
                            case LocationType.Deck when to.Id != Model.Deck.Id:
                                <a asp-page="Details" asp-route-id="@to.Id"> @to.Name </a>
                                break;

                            case LocationType.Unclaimed when canChangeTreasury:
                                <a asp-page="/Unowned/Index" asp-route-id="@to.Id"> @to.Name </a>
                                break;

                            case LocationType.Excess:
                                <a asp-page="/Treasury/Excess"> @to.Name </a>
                                break;

                            case LocationType.Box:
                                <a asp-page="/Treasury/Details" asp-route-id="@to.Id"> @to.Name </a>
                                break;
                            
                            default:
                                @to.Name
                                break;
                        }
                    </td>

                    <td> 
                        <component type="typeof(HoverCard)" render-mode="Static"
                            param-Preview="changes[0].Card"/>
                    </td>
                    <td> @changes[0].Copies </td>

                    @if (Model.IsFirstTransfer(transaction, to, from))
                    {
                        <td rowspan="@Model.GetTransactionCount(transaction)" class="text-center">
                            @if (canChangeTreasury)
                            {
                                <form method="POST">
                                    <input type="hidden" name="transactionId" value="@transaction.Id"/>
                                    <button title="Remove Record" type="submit" class="btn btn-danger"> &times; </button>
                                </form>
                            }
                            else
                            {
                                <button type="button" class="btn btn-danger" disabled> &times; </button>
                            }
                        </td>
                    }
                </tr>

                @foreach (var change in changes.Skip(1))
                {
                    <tr>
                        <td>
                            <component type="typeof(HoverCard)" render-mode="Static"
                                param-Preview="change.Card" />
                        </td>
                        <td> @change.Copies </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<partial name="_SeekPagingPartial" for="Seek"/>