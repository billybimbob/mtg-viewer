@page "{id:int}/{pageIndex:int?}"
@model Decks.HistoryModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} Change History";
}

<h1>
    Changes To
    <a asp-page="Viewer" asp-route-id="@Model.Deck.Id">
        @Model.Deck.Name </a>
</h1>

<div class="row">
    <div class="col">

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col"> @Html.DisplayNameForInnerType((Transaction t) => t.AppliedAt) </th>
                    <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.From) </th>
                    <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.To) </th>
                    <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Card) </th>
                    <th scope="col"> @Html.DisplayNameForInnerType((Change c) => c.Amount) </th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (transaction, from, to, changes) in Model.Transfers)
                {
                    var transferKey = (transaction.Id, from?.Id, to.Id);
                    var isFirstTransfer = Model.IsFirstTransfer.Contains(transferKey);
                    var first = changes.First();

                    <tr>
                        @if (isFirstTransfer)
                        {
                            <th scope="rowgroup" rowspan="@transaction.Changes.Count"> @transaction.AppliedAt </th>
                        }

                        <td rowspan="@changes.Count">
                            @switch (from)
                            {
                                case Deck when from.Id != Model.Deck.Id:
                                    <a asp-page="Viewer" asp-route-id="@from.Id"> @from.Name </a>
                                    break;

                                case Box:
                                    <a asp-page="/Treasury" asp-route-id="@from.Id"> @from.Name </a>
                                    break;

                                case null:
                                    <i> Added </i>
                                    break;
                                
                                default:
                                    @from.Name
                                    break;
                            }
                        </td>

                        <td rowspan="@changes.Count">
                            @if (to is Deck && to.Id != Model.Deck.Id)
                            {
                                <a asp-page="Viewer" asp-route-id="@to.Id"> @to.Name </a>
                            }
                            else
                            {
                                @to.Name
                            }
                        </td>

                        <td> 
                            @(await Html.RenderComponentAsync<HoverCard>(
                                RenderMode.Static, new { first.Card }))
                        </td>
                        <td> @first.Amount </td>

                        @if (isFirstTransfer)
                        {
                            <td rowspan="@transaction.Changes.Count" class="text-center">
                                <form method="POST">
                                    <input type="hidden" asp-for="Deck.Id" />
                                    <input type="hidden" name="transactionId" value="@transaction.Id"/>
                                    <button title="Remove Record" type="submit" class="btn btn-danger"> &times; </button>
                                </form>
                            </td>
                        }
                    </tr>

                    @foreach (var change in changes.Skip(1))
                    {
                        <tr>
                            <td>
                                @(await Html.RenderComponentAsync<HoverCard>(
                                    RenderMode.Static, new { change.Card }))
                            </td>
                            <td> @change.Amount </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        @await Html.PartialAsync("_PaginationPartial", Model.Pages)
    </div>
</div>