@page "{id:int}"
@model Decks.ViewerModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} Viewer";
}
@inject SymbolFormatter MtgSymbols


<h1>@Model.Deck.Owner.Name's @Model.Deck.Name</h1>

@if (Model.IsOwner)
{
    <div class="mb-3">
        @if (!Model.Deck.TradesTo.Any())
        {
            <a asp-page="Builder" asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" >
                Edit</a>
        }

        <a asp-page="History" asp-route-id="@Model.Deck.Id"
            class="btn btn-secondary" >
            History </a>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th scope="col"> @Html.DisplayNameForInnerType((CardAmount ca) => ca.Card) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
            <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
            <th scope="col"> Cards In Deck </th>
            <th scope="col"> Take Requests </th>
            <th scope="col"> Return Requests </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in Model.Cards)
        {
            <tr>
                <td>
                    @(await Html.RenderComponentAsync<HoverCard>(
                        RenderMode.Static, new { Card = (CardPreview) group.Card }))
                </td>
                <td> @(MtgSymbols.Format(group.Card.ManaCost).ToHtmlString()) </td>
                <td> @group.Card.SetName </td>

                <td> @(group.Actual?.Amount ?? 0) </td>
                <td> @(group.Want?.Amount ?? 0) </td>
                <td> @(group.GiveBack?.Amount ?? 0) </td>
            </tr>
        }
    </tbody>
</table>