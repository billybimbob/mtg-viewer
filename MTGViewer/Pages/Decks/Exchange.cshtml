@page "{id:int}"
@model Decks.ExchangeModel
@{
    ViewData["Title"] = $"Exchange {Model.Deck.Name}";
}
@inject SymbolFormatter MtgSymbols


<h1>@Model.Deck.Name Treasury Exchange</h1>

@if (Model.HasPendings)
{
    <div class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">Proceed Below to Exchange with the Treasury</h5>
        <p>Alternatively, wanted cards can be obtained from other players</p>

        <a asp-page="/Transfers/Request"
            asp-route-deckid="@Model.Deck.Id"
            class="btn btn-secondary">
            Player Request </a>
    </div>
}
else if (Model.Deck.Wants.Any())
{
    <div class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">The Treasury Lacks Wanted Cards</h5>
        <p>Wanted cards can also be obtained by requesting from other players.</p>

        <a asp-page="/Transfers/Request"
            asp-route-deckid="@Model.Deck.Id"
            class="btn btn-secondary">
            Player Request </a>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        <h5 class="alert-heading">There are no pending changes for the deck</h5>
    </div>
}


@if (Model.Deck.Cards.Any())
{
    <div class="row">
        <h3>Current Cards</h3>

        <table class="table mt-2">
            <thead>
                <tr>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.Name)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.ManaCost)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.SetName)</th>
                    <th>@Html.DisplayNameForInnerType((CardAmount ca) => ca.Amount)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var amount in Model.Deck.Cards)
                {
                    var card = amount.Card;
                    <tr>
                        <td>
                            <a asp-page="/Cards/Details"
                            asp-route-id="@card.Id"
                            class="fw-bold">
                            @card.Name </a>
                        </td>
                        <td> @(MtgSymbols.Format(card.ManaCost).ToHtmlString()) </td>

                        <td>@card.SetName</td>
                        <td>@amount.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="row">
    <div class="col">
        <h3>Wanted From Treasury</h3>

        <table class="table mt-2">
            <thead>
                <tr>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.Name)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.ManaCost)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.SetName)</th>
                    <th>@Html.DisplayNameForInnerType((CardRequest cr) => cr.Amount)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var want in Model.Deck.Wants)
                {
                    var card = want.Card;
                    <tr>
                        <td>
                            <a asp-page="/Cards/Details"
                                asp-route-id="@card.Id"
                                class="fw-bold">
                                @card.Name </a>
                        </td>
                        <td> @(MtgSymbols.Format(card.ManaCost).ToHtmlString()) </td>

                        <td>@card.SetName</td>
                        <td>@want.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="col">
        <h3>Returning To Treasury</h3>
        <table class="table mt-2">
            <thead>
                <tr>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.Name)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.ManaCost)</th>
                    <th>@Html.DisplayNameForInnerType((Card c) => c.SetName)</th>
                    <th>@Html.DisplayNameForInnerType((CardRequest cr) => cr.Amount)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var giveBack in Model.Deck.GiveBacks)
                {
                    var card = giveBack.Card;
                    <tr>
                        <td>
                            <a asp-page="/Cards/Details"
                                asp-route-id="@card.Id"
                                class="fw-bold">
                                @card.Name </a>
                        </td>
                        <td> @(MtgSymbols.Format(card.ManaCost).ToHtmlString()) </td>

                        <td>@card.SetName</td>
                        <td>@giveBack.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (Model.HasPendings)
{
    <div class="mt-2 alert alert-danger" role="alert">
        <h5 class="alert-heading">Treasury Confirmation</h5>
        <p> 
            Make sure that any exchanges with the Treasury are done <i>only</i> when the changes 
            can also be reflected with the physical colleciton. More specifically, modifications 
            to the Treasury represent current state of the physical collection, and therefore 
            both must be kept syncronized.
        </p>

        <form method="POST">
            <input type="hidden" asp-for="Deck.Id" />
            <input type="submit" class="btn btn-danger" value="Commit" />
        </form>
    </div>
}