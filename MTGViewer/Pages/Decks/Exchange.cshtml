@page "{id:int}"
@model Decks.ExchangeModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} - Exchange";
}
@inject SymbolFormatter MtgSymbols


<h1>@Model.Deck.Name Treasury Exchange</h1>

@if (Model.HasPendings)
{
    <section class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">Proceed Below to Exchange with the Treasury</h5>
        <p>Alternatively, wanted cards can be obtained from other players</p>

        <div class="btn-group" role="group">
            <a asp-page="Details"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Details </a>

            <a asp-page="/Transfers/Request"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Player Request </a>
        </div>
    </section>
}
else if (Model.Deck.WantTotal > 0)
{
    <section class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">The Treasury Lacks Wanted Cards</h5>
        <p>Wanted cards can also be obtained by requesting from other players.</p>

        <div class="btn-group" role="group">
            <a asp-page="Details"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Details </a>

            <a asp-page="/Transfers/Request"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Player Request </a>
        </div>
    </section>
}
else
{
    <section class="alert alert-warning" role="alert">
        <h5 class="alert-heading">There are no pending changes for the deck</h5>

        <a asp-page="Details"
            asp-route-id="@Model.Deck.Id"
            class="btn btn-secondary" role="button">
            Details </a>
    </section>
}

<div class="table-responsive-md">
    <table class="table mt-2">
        <thead>
            <tr>
                <th scope="col"> @Html.DisplayNameForInnerType((Amount ca) => ca.Card) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
                <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                <th scope="col"> Current Cards </th>
                <th scope="col"> Wanted Cards </th>
                <th scope="col"> Returning Cards </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var card in Model.Cards)
            {
                <tr>
                    <td>
                        <a asp-page="/Cards/Details" asp-route-id="@card.Id">
                            @card.Name </a>
                    </td>
                    <td>
                        <div class="ms-group">
                            @MtgSymbols.Format(card.ManaCost).ToHtmlString()
                        </div>
                    </td>
                    <td>@card.SetName</td>

                    <td>@card.Held</td>
                    <td>@card.Want</td>
                    <td>@card.Returning</td>
                </tr>
            }
                @if (Model.Deck.AmountTotal > Model.Cards.Sum(c => c.Held)
                    || Model.Deck.WantTotal > Model.Cards.Sum(c => c.Want)
                    || Model.Deck.GiveBackTotal > Model.Cards.Sum(c => c.Returning))
                {
                    <tr>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                        <td> ... </td>
                    </tr>
                }
                <tr>
                    <th> Total </th>
                    <td> -- </td>
                    <td> -- </td>
                    <td> <strong>@Model.Deck.AmountTotal</strong> </td>
                    <td> <strong>@Model.Deck.WantTotal</strong> </td>
                    <td> <strong>@Model.Deck.GiveBackTotal</strong> </td>
                </tr>
        </tbody>
    </table>
</div>


@if (Model.HasPendings)
{
    <div class="mt-2 alert alert-danger" role="alert">
        <h5 class="alert-heading">Treasury Confirmation</h5>
        <p> 
            Make sure that any exchanges with the Treasury are done <i>only</i> when the
            changes can also be reflected with the physical collection.
        </p>
        <hr class="mb-1">
        <small class="my-1"> 
            Modifications to the Treasury represent current state of the physical collection, 
            and therefore both must be kept synchronized.
        </small>

        <form method="POST" class="mt-3">
            <input type="submit" class="btn btn-danger" value="Commit" />
        </form>
    </div>
}