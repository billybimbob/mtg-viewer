@page "{id:int}"
@model Decks.ExchangeModel
@{
    ViewData["Title"] = $"{Model.Deck.Name} - Exchange";
}
@inject SymbolFormatter MtgSymbols
@using MTGViewer.Data.Internal

@{ bool hasPendings = Model.Deck.GiveBacks.Any() || Model.Matches.Any(); }


<h1>@Model.Deck.Name Treasury Exchange</h1>

@if (hasPendings)
{
    <section class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">Proceed Below to Exchange with the Treasury</h5>
        <p>Alternatively, wanted cards can be obtained from other players</p>

        <div class="btn-group" role="group">
            <a asp-page="Details"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Details </a>

            <a asp-page="/Transfers/Request"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Player Request </a>
        </div>
    </section>
}
else if (Model.Deck.HasWants)
{
    <section class="alert alert-secondary" role="alert">
        <h5 class="alert-heading">The Treasury Lacks Wanted Cards</h5>
        <p>Wanted cards can also be obtained by requesting from other players.</p>

        <div class="btn-group" role="group">
            <a asp-page="Details"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Details </a>

            <a asp-page="/Transfers/Request"
                asp-route-id="@Model.Deck.Id"
                class="btn btn-secondary" role="button">
                Player Request </a>
        </div>
    </section>
}
else
{
    <section class="alert alert-warning" role="alert">
        <h5 class="alert-heading">There are no pending changes for the deck</h5>

        <a asp-page="Details"
            asp-route-id="@Model.Deck.Id"
            class="btn btn-secondary" role="button">
            Details </a>
    </section>
}


<h3> Wanted Card Matches </h3>

<section class="row">
    <div class="col">
        <div class="table-responsive-md">
            <table class="table mt-2">
                <thead>
                    <tr>
                        <th scope="col"> @Html.DisplayNameForInnerType((Want w) => w.Card) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((Want w) => w.Copies) </th>
                    </tr>
                </thead>

                <tbody>
                    @if (!Model.Matches.Any())
                    {
                        <tr>
                            <td> -- </td>
                            <td> -- </td>
                            <td> -- </td>
                            <td> -- </td>
                        </tr>
                    }
                    @foreach (var card in Model.Matches)
                    {
                        <tr>
                            <td>
                                <component type="@typeof(HoverCard)" render-mode="Static"
                                    param-Preview="@card" />
                            </td>
                            <td>
                                <div class="ms-group">
                                    @MtgSymbols.Format(card.ManaCost).ToHtmlString()
                                </div>
                            </td>
                            <td> @card.SetName </td>
                            <td> @card.Copies </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

<partial name="_OffsetPagingPartial" for="Matches.Offset"/>


<h3> Returning Cards </h3>

<section class="row">
    <div class="col">
        <div class="table-responsive-md">
            <table class="table mt-2">
                <thead>
                    <tr>
                        <th scope="col"> @Html.DisplayNameForInnerType((GiveBack g) => g.Card) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.ManaCost) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((Card c) => c.SetName) </th>
                        <th scope="col"> @Html.DisplayNameForInnerType((GiveBack g) => g.Copies) </th>
                    </tr>
                </thead>
                <tbody>
                    @if (!Model.Deck.GiveBacks.Any())
                    {
                        <tr>
                            <td> -- </td>
                            <td> -- </td>
                            <td> -- </td>
                            <td> -- </td>
                        </tr>
                    }
                    @foreach (var card in Model.Deck.GiveBacks)
                    {
                        <tr>
                            <td>
                                <component type="@typeof(HoverCard)" render-mode="Static"
                                    param-Preview="@card" />
                            </td>
                            <td>
                                <div class="ms-group">
                                    @MtgSymbols.Format(card.ManaCost).ToHtmlString()
                                </div>
                            </td>
                            <td>@card.SetName</td>
                            <td>@card.Copies</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>


@if (hasPendings)
{
    <div class="mt-2 alert alert-danger" role="alert">
        <h5 class="alert-heading">Treasury Confirmation</h5>
        <p> 
            Make sure that any exchanges with the Treasury are done <i>only</i> when the
            changes can also be reflected with the physical collection.
        </p>
        <hr class="mb-1">
        <small class="my-1"> 
            Modifications to the Treasury represent current state of the physical collection, 
            and therefore both must be kept synchronized.
        </small>

        <form method="POST" class="mt-3">
            <input type="submit" class="btn btn-danger" value="Commit" />
        </form>
    </div>
}