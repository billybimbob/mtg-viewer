@inject PageSize PageSize

@if (Offset.HasMultiple)
{
    (int start, int end) = GetBounds();
    string disabled = IsDisabled ? "disabled" : string.Empty;

    <nav>
        <ul class="pagination justify-content-center">

            @if (start > 0)
            {
                <li class="page-item @disabled">
                    <button title="To First Page"
                        @onclick="() => ChangePageAsync(0)"
                        disabled="@IsDisabled"
                        class="page-link">
                        1 </button>
                </li>

                <li class="page-item disabled">
                    <span class="page-link"> ... </span>
                </li>
            }

            @for (int i = start; i < end; ++i)
            {
                int offset = i;

                @if (offset == Offset.Current)
                {
                    <li class="page-item active">
                        <span class="page-link">
                            @(offset + 1)
                            <span class="sr-only">(current)</span>
                        </span>
                    </li>
                }
                else
                {
                    <li class="page-item @disabled">
                        <button title="To Page @(offset + 1)"
                            @onclick="() => ChangePageAsync(offset)"
                            disabled="@IsDisabled"
                            class="page-link">
                            @(offset + 1) </button>
                    </li>
                }
            }

            @if (end < Offset.Total - 1)
            {
                <li class="page-item disabled">
                    <span class="page-link"> ... </span>
                </li>
            }

            @if (end < Offset.Total)
            {
                <li class="page-item @disabled">
                    <button title="To Last Page"
                        @onclick="() => ChangePageAsync(Offset.Total - 1)"
                        disabled="@IsDisabled"
                        class="page-link">
                        @Offset.Total </button>
                </li>
            }

        </ul>
    </nav>
}

@code
{
    [Parameter]
    public Offset Offset { get; set; }

    [Parameter]
    public EventCallback<int> PageSelected { get; set; }

    [Parameter]
    public int Size { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }


    private bool _isBusy;
    private int _pageSize;


    protected override void OnParametersSet()
    {
        _pageSize = Size > 0 ? Size : PageSize.Default;
    }


    public (int, int) GetBounds()
    {
        if (_pageSize == default)
        {
            return default;
        }

        int start = Offset.Current / _pageSize * _pageSize;
        int end = Math.Min(Offset.Total, start + _pageSize + 1);

        if (start > 0)
        {
            start -= 1;
        }

        return (start, end);
    }


    public async Task ChangePageAsync(int page)
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await PageSelected.InvokeAsync(page);
        }
        finally
        {
            _isBusy = false;
        }
    }
}
