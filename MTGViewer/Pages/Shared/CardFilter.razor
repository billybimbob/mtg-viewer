@inject ParseTextFilter ParseFilter

<div class="form-row align-items-center mb-3">
    <div class="col-12 col-md-4">
        <input class="form-control" placeholder="Card Name"
            disabled="@IsDisabled" @bind="SearchName" />
    </div>

    <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
        @foreach (var (color, symbol) in Symbol.Colors)
        {
            <button title="Filter By @color"
                type="button"
                class="btn btn-outline-secondary ms-filter @ColorActive(color)"
                disabled="@IsDisabled"
                @onclick="() => ColorChanged.InvokeAsync(color)">

                <i class="ms ms-@symbol.ToLower() ms-cost"></i>
            </button>
        }
    </div>

    @ChildContent
</div>

@code
{
    [Parameter]
    public TextFilter TextFilter { get; set; }

    [Parameter]
    public EventCallback<TextFilter> TextFilterChanged { get; set; }

    [Parameter]
    public Color Color { get; set; }

    [Parameter]
    public EventCallback<Color> ColorChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    private string? _searchName;
    private string? SearchName
    {
        get => _searchName ?? TextFilter.ToString();
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                value = null;
            }

            if (IsDisabled
                || value?.Length > TextFilter.TextLimit
                || value == _searchName)
            {
                return;
            }

            var filter = ParseFilter.Parse(value);

            TextFilterChanged.InvokeAsync(filter);

            _searchName = value;
        }
    }


    private string ColorActive(Color color)
    {
        return Color.HasFlag(color) ? "active" : string.Empty;
    }
}
