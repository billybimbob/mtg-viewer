
<div class="form-row align-items-center mb-3">
    <div class="col-12 col-md-4">
        <input class="form-control" placeholder="Card Name"
            disabled="@IsDisabled" @bind="Search" />
    </div>

    <div class="col-auto btn-group pt-2 pt-md-0" role="group" aria-label="Color Buttons">
        @foreach (var (color, symbol) in Symbol.Colors)
        {
            <button title="Filter By @color"
                type="button"
                class="btn btn-outline-secondary ms-filter @ColorActive(color)"
                disabled="@IsDisabled"
                @onclick="() => ColorChanged.InvokeAsync(color)">

                <i class="ms ms-@symbol.ToLower() ms-cost"></i>
            </button>
        }
    </div>

    @ChildContent
</div>

@code
{
    public const int SearchNameLimit = 40;

    [Parameter]
    public string? SearchName { get; set; }

    [Parameter]
    public EventCallback<string> SearchNameChanged { get; set; }

    [Parameter]
    public Color Color { get; set; }

    [Parameter]
    public EventCallback<Color> ColorChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string? Search
    {
        get => SearchName;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                value = null;
            }

            if (value?.Length > SearchNameLimit || value == SearchName)
            {
                return;
            }

            SearchNameChanged.InvokeAsync(value);
        }
    }

    private string ColorActive(Color color)
    {
        return Color.HasFlag(color) ? "active" : string.Empty;
    }
}
