@typeparam TEntity where TEntity : IEquatable<TEntity>

@inject NavigationManager Nav

@if (HasPrevious || HasNext)
{
    <nav>
        <ul class="pagination justify-content-center">
            @if (!HasPrevious)
            {
                <li class="page-item disabled">
                    <span title="First Page" class="page-link disabled"> First </span>
                </li>

                <li class="page-item disabled">
                    <span title="Previous Page" class="page-link disabled"> Previous </span>
                </li>
            }
            else if (ChangePage.HasDelegate)
            {
                <li class="page-item">
                    <button title="Previous Page" @onclick="PreviousPageAsync" class="page-link">
                        Previous </button>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a title="First Page" href="@FirstUrl()" class="page-link"> First </a>
                </li>

                <li class="page-item">
                    <a title="Previous Page" href="@PreviousUrl()" class="page-link"> Previous </a>
                </li>
            }

            @if (!HasNext)
            {
                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Next </span>
                </li>

                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Last </span>
                </li>
            }
            else if (ChangePage.HasDelegate)
            {
                <li class="page-item ">
                    <button title="Next Page" @onclick="NextPageAsync" class="page-link">
                        Next </button>
                </li>
            }
            else
            {
                <li class="page-item ">
                    <a title="Next Page" href="@NextUrl()" class="page-link"> Next </a>
                </li>

                <li class="page-item">
                    <a title="Last Page" href="@LastUrl()" class="page-link"> Last </a>
                </li>
            }
        </ul>
    </nav>
}


@code 
{
    [Parameter]
    public Seek<TEntity> Seek { get; set; }

    [Parameter]
    public EventCallback<TEntity> ChangePage { get; set; }

    public bool HasPrevious =>
        Seek.Previous is TEntity previous && !previous.Equals(default);

    public bool HasNext =>
        Seek.Next is TEntity next && !next.Equals(default);


    private bool _isBusy;


    private static readonly Dictionary<string, object?> _first = new()
    {
        ["backtrack"] = null,
        ["seek"] = null
    };

    private readonly Dictionary<string, object?> _previous = new()
    {
        ["backtrack"] = true
    };

    private readonly Dictionary<string, object?> _next = new()
    {
        ["backtrack"] = null
    };

    private static readonly Dictionary<string, object?> _last = new()
    {
        ["backtrack"] = true,
        ["seek"] = null
    };


    protected override void OnParametersSet()
    {
        _previous["seek"] = Seek.Previous;
        _next["seek"] = Seek.Next;
    }


    public string FirstUrl() =>
        Nav.GetUriWithQueryParameters(_first);

    public string PreviousUrl() =>
        Nav.GetUriWithQueryParameters(_previous);

    public string NextUrl() =>
        Nav.GetUriWithQueryParameters(_next);

    public string LastUrl() =>
        Nav.GetUriWithQueryParameters(_last);


    public async Task PreviousPageAsync()
    {
        if (_isBusy || Seek.Previous is not TEntity current)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await ChangePage.InvokeAsync(current);
        }
        finally
        {
            _isBusy = false;
        }
    }


    public async Task NextPageAsync()
    {
        if (_isBusy || Seek.Next is not TEntity next)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await ChangePage.InvokeAsync(next);
        }
        finally
        {
            _isBusy = false;
        }
    }

}