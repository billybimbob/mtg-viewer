@page "/"
@implements IDisposable

@inject IDbContextFactory<CardDbContext> DbFactory
@inject PageSizes PageSizes
@inject FixedCache Cache
@inject ILogger<Home> Logger


<PageTitle> MTG Viewer </PageTitle>

<h1 class="text-center display-4">Welcome to the card database!</h1>

<div class="pt-4">
    <a href="/Cards" title="Card Collection">
        <h3>Cards from our collection!</h3>
    </a>

    <div class="row no-gutters justify-content-center">
        @foreach (var card in RandomCards)
        {
            <a href="/Cards/Details/@card.Id" class="col-md-3 col-6"
                title="@card.Name Details"
                aria-label="@card.Id details">

                <img alt="@card.Id image" 
                    class="w-100 img-fluid rounded" 
                    src="@card.ImageUrl.WithHttps()">
            </a>
        }
    </div>

    <div class="pt-3 d-flex justify-content-center">
        <button title="More Cards" type="button" class="btn btn-secondary"
            @onclick="LoadMoreCardsAsync" 
            disabled="@(IsBusy || IsFullyLoaded)" >
            @if (IsBusy)
            {
                <text>
                    <span class="spinner-border spinner-border-sm"
                        role="status" aria-hidden="true"> </span>
                    Loading...
                </text>
            }
            else
            {
                <text> Load More </text>
            }
        </button>
    </div>
</div>

<div class="pt-5">
    <a href="/Treasury/History" title="Treasury History">
        <h3>Recent Shared Collection Changes</h3>
    </a>

    <ul class="list-group list-group-flush">
        @foreach (var transaction in RecentChanges)
        {
            var changes = transaction.Changes;
            var adds = changes.Where(c => c.To is Box);
            var removes = changes.Where(c => c.From is Box);

            <li class="list-group-item">
                <div class="row justify-content-between">

                    <div class="col-md-10 col-9">
                        <div class="row align-items-center">
                            <div class="row-title ellipsis pr-2">
                                @if (adds.Any())
                                {
                                    <strong> Added </strong> @CardNames(adds)
                                }
                                else if (removes.Any())
                                {
                                    <strong> Removed </strong> @CardNames(removes)
                                }
                                else
                                {
                                    <text> No cards added </text>
                                }
                            </div>
                            <span class="badge badge-secondary badge-pill">
                                @changes.Sum(c => c.Amount) 
                            </span>
                        </div>
                    </div>

                    <div class="col d-flex align-items-center justify-content-end text-right">
                        <small class="text-muted"> @ElapsedTime(transaction) </small>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>


@code {

    private const int ChunkSize = 4;

    private readonly CancellationTokenSource _cancel = new();

    private bool _isBusy;
    private DateTime _currentTime;

    private RandomCardsContext? _randomContext;
    private IReadOnlyList<Transaction> _recentChanges = Array.Empty<Transaction>();


    public bool IsBusy => _isBusy;

    public bool IsFullyLoaded => !_randomContext?.HasMore ?? true;

    public IReadOnlyList<Card> RandomCards => _randomContext?.Cards ?? Array.Empty<Card>();

    public IReadOnlyList<Transaction> RecentChanges => _recentChanges;


    public static string CardNames(IEnumerable<Change> changes)
    {
        var cardNames = changes
            .GroupBy(c => c.Card.Name, (name, _) => name);

        return string.Join(", ", cardNames);
    }


    public string ElapsedTime(Transaction transaction)
    {
        var elapsed = _currentTime - transaction.AppliedAt;

        return elapsed switch
        {
            { Days: >0 } => $"{elapsed.Days} days ago",
            { Hours: >0 } => $"{elapsed.Hours} hours ago",
            { Minutes: >0 } => $"{elapsed.Minutes} min ago",
            _ => $"{elapsed.Seconds} sec ago"
        };
    }


    public async Task LoadMoreCardsAsync()
    {
        if (_isBusy || _randomContext is null || !_randomContext.HasMore)
        {
            return;
        }

        _isBusy = true;
        
        try
        {
            var cancelToken = _cancel.Token;

            await using var dbContext = await DbFactory.CreateDbContextAsync(cancelToken);

            dbContext.Cards.AttachRange(_randomContext.Cards);

            await _randomContext.LoadNextChunkAsync(dbContext, cancelToken);
        }
        catch (OperationCanceledException ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            var cancelToken = _cancel.Token;
            int loadLimit = PageSizes.Limit;

            await using var dbContext = await DbFactory.CreateDbContextAsync(cancelToken);

            _randomContext = await RandomCardsContext
                .InitializeAsync(dbContext, Cache, loadLimit, cancelToken);

            _recentChanges = await Cache
                .GetOrCreateAsync(nameof(_recentChanges), () =>
                    RecentTransactionsAsync(dbContext, cancelToken));

            _currentTime = DateTime.Now;
        }
        catch (OperationCanceledException ex)
        {
            Logger.LogError(ex.ToString());
        }
        finally
        {
            _isBusy = false;
        }
    }


    public void Dispose()
    {
        _cancel.Cancel();
        _cancel.Dispose();
    }



    private class RandomCardsContext
    {
        private readonly List<Card> _cards;
        private readonly IReadOnlyList<string[]> _loadOrder;
        private readonly int _limit;

        public IReadOnlyList<Card> Cards => _cards;
        public bool HasMore => _cards.Count < _limit;


        private RandomCardsContext(IReadOnlyList<string[]> loadOrder)
        {
            _cards = new();
            _loadOrder = loadOrder.ToList();
            _limit = _loadOrder.Sum(chunk => chunk.Length);
        }


        public static async Task<RandomCardsContext> InitializeAsync(
            CardDbContext dbContext, 
            FixedCache cache, 
            int loadLimit, 
            CancellationToken cancel)
        {
            var loadOrder = await cache
                .GetOrCreateAsync(nameof(_loadOrder), () =>
                    ShuffleOrderAsync(dbContext, loadLimit, cancel));

            var randomContext = new RandomCardsContext(loadOrder);
            var cacheCards = randomContext.GetCachedCards(cache);

            if (cacheCards is not null)
            {
                randomContext._cards.AddRange(cacheCards);
            }

            else if (randomContext.HasMore)
            {
                await randomContext.LoadNextChunkAsync(dbContext, cancel);
                cache[nameof(_cards)] = randomContext._cards;
            }

            return randomContext;
        }


        private IReadOnlyList<Card>? GetCachedCards(FixedCache cache)
        {
            if (!cache.TryGetValue(nameof(_cards), out IReadOnlyList<Card>? cacheCards) 
                || cacheCards is null)
            {
                return null;
            }

            bool orderMatches = _loadOrder
                .SelectMany(chunk => chunk)
                .Take(cacheCards.Count)
                .SequenceEqual( cacheCards.Select(c => c.Id) );

            if (!orderMatches)
            {
                return null;
            }

            return cacheCards;
        }


        public async Task LoadNextChunkAsync(CardDbContext dbContext, CancellationToken cancel)
        {
            if (dbContext is null)
            {
                throw new ArgumentNullException(nameof(dbContext));
            }

            var nextChunk = HasMore 
                ? _loadOrder[_cards.Count / ChunkSize] 
                : null;

            if (nextChunk is null)
            {
                throw new InvalidOperationException("Cannot load any more chunks");
            }

            _cards.AddRange( await CardChunkAsync(dbContext, nextChunk, cancel) );
        }
    }



    #region Database Queries

    private static Task<List<string[]>> ShuffleOrderAsync(
        CardDbContext dbContext,
        int limit,
        CancellationToken cancel)
    {
        return dbContext.Cards
            .Select(c => c.Id)
            .OrderBy(_ => EF.Functions.Random())
            .Take(limit)

            .AsAsyncEnumerable()
            .Chunk(ChunkSize)

            .ToListAsync(cancel)
            .AsTask();
    }


    private static Task<List<Card>> CardChunkAsync(
        CardDbContext dbContext, 
        string[] chunk,
        CancellationToken cancel)
    {
        var chunkCards = dbContext.Cards
            .Where(c => chunk.Contains(c.Id))
            .AsAsyncEnumerable();

        // preserve order of chunk
        return chunk
            .ToAsyncEnumerable()
            .Join(chunkCards,
                cid => cid,
                c => c.Id,
                (_, card) => card)
            .ToListAsync(cancel)
            .AsTask();
    }


    private static Task<List<Transaction>> RecentTransactionsAsync(
        CardDbContext dbContext,
        CancellationToken cancel)
    {
        return dbContext.Transactions
            .Where(t => t.Changes.Any(c => c.To is Box || c.From is Box))

            .Include(t => t.Changes)
                .ThenInclude(c => c.Card)

            .Include(t => t.Changes)
                .ThenInclude(c => c.From)

            .Include(t => t.Changes)
                .ThenInclude(c => c.To)

            .Include(t => t.Changes
                .Where(c => c.To is Box || c.From is Box)
                .OrderBy(c => c.Card.Name))

            .OrderByDescending(t => t.AppliedAt)
            .Take(ChunkSize)

            .ToListAsync(cancel);
    }

    #endregion
}
