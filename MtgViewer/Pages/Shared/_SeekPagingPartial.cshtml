@model Seek
@using EntityFrameworkCore.Paging.Query

@if (HasOptions)
{
    <nav>
        <ul class="pagination justify-content-center">
            @if (HasFirst)
            {
                <li class="page-item">
                    <a title="First Page" class="page-link"
                        asp-route-seek="@null"
                        asp-route-direction="@SeekDirection.Forward">
                        First </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="First Page" class="page-link disabled"> First </span>
                </li>
            }

            @if (HasPrevious)
            {
                <li class="page-item">
                    <a title="Previous Page" class="page-link"
                        asp-route-seek="@PreviousKey"
                        asp-route-direction="@SeekDirection.Backwards">
                        Previous </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Previous Page" class="page-link disabled"> Previous </span>
                </li>
            }

            @if (HasNext)
            {
                <li class="page-item ">
                    <a title="Next Page" class="page-link"
                        asp-route-seek="@NextKey"
                        asp-route-direction="@SeekDirection.Forward">
                        Next </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Next </span>
                </li>
            }

            @if (HasLast)
            {
                <li class="page-item">
                    <a title="Last Page" class="page-link"
                        asp-route-seek="@null"
                        asp-route-direction="@SeekDirection.Backwards">
                        Last </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Last </span>
                </li>
            }
        </ul>
    </nav>
}

@functions
{
    public bool HasOptions => Model.Previous is not null || Model.Next is not null || Model.IsMissing;

    public bool HasFirst => Model.Previous is not null || Model.IsMissing;
    public bool HasLast => Model.Next is not null || Model.IsMissing;

    public bool HasPrevious => Model.Previous is not null;
    public bool HasNext => Model.Next is not null;

    public object? PreviousKey => GetKey(Model.Previous);
    public object? NextKey => GetKey(Model.Next);

    private object? GetKey(object? value)
    {
        if (value is null)
        {
            return null;
        }

        var keyProperty = ExpressionHelpers.GetKeyProperty(value.GetType());

        return keyProperty?.GetValue(value);
    }
}
