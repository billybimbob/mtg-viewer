@typeparam TEntity where TEntity : class
@using EntityFrameworkCore.Paging

@if (HasOptions)
{
    <nav>
        <ul class="pagination justify-content-center">
            @if (HasFirst && PageSelected.HasDelegate && !IsDisabled)
            {
                <li class="page-item">
                    <button title="First Page" class="page-link" @onclick="FirstPageAsync">
                        First
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="First Page" class="page-link disabled"> First </span>
                </li>
            }

            @if (HasPrevious && PageSelected.HasDelegate && !IsDisabled)
            {
                <li class="page-item">
                    <button title="Previous Page" class="page-link" @onclick="PreviousPageAsync">
                        Previous
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Previous Page" class="page-link disabled"> Previous </span>
                </li>
            }

            @if (HasNext && PageSelected.HasDelegate && !IsDisabled)
            {
                <li class="page-item ">
                    <button title="Next Page" class="page-link" @onclick="NextPageAsync">
                        Next
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Next </span>
                </li>
            }

            @if (HasLast && PageSelected.HasDelegate && !IsDisabled)
            {
                <li class="page-item">
                    <button title="Last Page" class="page-link" @onclick="LastPageAsync">
                        Last
                    </button>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span title="Next Page" class="page-link"> Last </span>
                </li>
            }
        </ul>
    </nav>
}

@code
{
    [Parameter]
    public Seek<TEntity> Seek { get; set; }

    [Parameter]
    public EventCallback<SeekRequest<TEntity>> PageSelected { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    internal bool HasOptions => Seek.Previous is not null || Seek.Next is not null;

    internal bool HasFirst => Seek.Previous is not null || Seek.IsPartial;
    internal bool HasLast => Seek.Next is not null || Seek.IsPartial;

    internal bool HasPrevious => Seek.Previous is not null;
    internal bool HasNext => Seek.Next is not null;

    private bool _isBusy;

    internal async Task FirstPageAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await PageSelected.InvokeAsync(
            new SeekRequest<TEntity>(default, SeekDirection.Forward));
        }
        finally
        {
            _isBusy = false;
        }
    }

    internal async Task PreviousPageAsync()
    {
        if (_isBusy || Seek.Previous is not TEntity previous)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await PageSelected.InvokeAsync(
            new SeekRequest<TEntity>(previous, SeekDirection.Backwards));
        }
        finally
        {
            _isBusy = false;
        }
    }

    internal async Task NextPageAsync()
    {
        if (_isBusy || Seek.Next is not TEntity next)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await PageSelected.InvokeAsync(
            new SeekRequest<TEntity>(next, SeekDirection.Forward));
        }
        finally
        {
            _isBusy = false;
        }
    }

    internal async Task LastPageAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        try
        {
            await PageSelected.InvokeAsync(
            new SeekRequest<TEntity>(default, SeekDirection.Backwards));
        }
        finally
        {
            _isBusy = false;
        }
    }
}
