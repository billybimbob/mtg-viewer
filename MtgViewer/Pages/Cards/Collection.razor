@page "/Cards"
@using System.Linq.Expressions
@using MtgViewer.Data.Projections

@inject SymbolFormatter MtgSymbols

<PageTitle> Card Collection </PageTitle>

<h1>Card Collection</h1>

<div class="btn-group mb-3" role="group">
    <AuthorizeView>
        <AuthorizeView Policy="@CardPolicies.ChangeTreasury">
            <Authorized Context="treasuryPolicy">
                <a class="btn btn-secondary" href="/Cards/Create" role="button">Add Card</a>
            </Authorized>
            <NotAuthorized Context="treasuryPolicy">
                <button class="btn btn-secondary" role="button" disabled>Add Card</button>
            </NotAuthorized>
        </AuthorizeView>
    </AuthorizeView>
    <a class="btn btn-secondary" href="/Cards/Statistics" role="button"> Statistics </a>
</div>

<CardFilter
    @bind-Search="BoundSearch"
    @bind-Color="PickedColors"
    IsDisabled="@IsLoading" >
    @if (IsLoading)
    {
        <div class="spinner-grow text-secondary p-2" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
</CardFilter>

<div class="table-responsive-md">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"
                    title="Order By Name"
                    @onclick="() => Reorder(c => c.Name)"
                    class="@GetHeaderClass(c => c.Name, isDefault: true)">
                    @HtmlHelpers.GetDisplay((Card c) => c.Name)
                </th>

                <th scope="col"
                    title="Order By Mana Value"
                    @onclick="() => Reorder(c => c.ManaCost)"
                    class="@GetHeaderClass(c => c.ManaCost)">
                    @HtmlHelpers.GetDisplay((Card c) => c.ManaCost)
                </th>

                <th scope="col"
                    title="Order By Set Name"
                    @onclick="() => Reorder(c => c.SetName)"
                    class="@GetHeaderClass(c => c.SetName)">
                    @HtmlHelpers.GetDisplay((Card c) => c.SetName)
                </th>

                <th scope="col"
                    title="Order By Rarity"
                    @onclick="() => Reorder(c => c.Rarity)"
                    class="@GetHeaderClass(c => c.Rarity)">
                    @HtmlHelpers.GetDisplay((Card c) => c.Rarity)
                </th>

                <th scope="col"
                    title="Order By Number of Copies"
                    @onclick="() => Reorder(c => c.Holds)"
                    class="@GetHeaderClass(c => c.Holds)">
                    Total Copies
                </th>
            </tr>
        </thead>

        <tbody>
            @if (!IsLoading && !Cards.Any())
            {
                <tr>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                    <td> -- </td>
                </tr>

            }
            @foreach (var card in Cards)
            {
                <tr @key="card.Id">
                    <td> <HoverCard Preview="card"/> </td>
                    <td>
                        <div class="ms-group">
                            @MtgSymbols.Format(card.ManaCost).ToMarkupString()
                        </div>
                    </td>
                    <td> @card.SetName </td>
                    <td> @card.Rarity </td>
                    <td> @card.Held </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<SeekPaging TEntity="CardCopy"
    Seek="Cards.Seek" PageSelected="SeekPage" IsDisabled="IsLoading" />

@code
{
    internal string GetHeaderClass<T>(Expression<Func<Card, T>> property, bool isDefault = false)
    {
        bool isMatch = property
            is { Body: MemberExpression { Member.Name: string name }}
            && (name == Order || (Order is null && isDefault));

        if (isMatch && IsLoading)
        {
            return "font-weight-bold";
        }
        else if (isMatch)
        {
            return "btn-link font-weight-bold";
        }
        else if (!IsLoading)
        {
            return "clickable btn-link";
        }
        else
        {
            return string.Empty;
        }
    }
}
