@using MTGViewer.Data
@using MTGViewer.Data.Concurrency
@using MTGViewer.Areas.Identity.Data

@namespace MTGViewer.Components
@implements IDisposable

@inject NavigationManager NavigationManager
@inject IDbContextFactory<CardDbContext> DbFactory
@inject ILogger<DeckBuilder> Logger


<h1>Deck Builder</h1>

<button title="Save Deck"
        type="button"
        class="btn btn-secondary"
        @onclick="CommitChangesAsync"
        disabled="@HasNoChanges">
    Save Changes
</button>

<h2>Available Cards</h2>

<table class="table">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Rarity</th>
            <th>Amount Available</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in _dbCards.Values)
        {
            var available = _availables[card.Id].Amount;
            <tr>
                <td class="fw-bold">@card.Name</td>

                <td>
                    @foreach (var cost in card.GetColorSymbols())
                    {
                        <span class="m-1 ms ms-@cost.ToLower() ms-cost"></span>
                    }
                </td>

                <td>@card.SetName</td>
                <td>@card.Rarity</td>
                <td>@available</td>

                <td>
                    <button title="@card.Name Add"
                            type="button"
                            class="btn btn-outline-secondary border-0 rounded"
                            disabled="@(available==0)"
                            @onclick="() => AddCardToDeck(card)">
                        Add Card
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


<input @bind="_deck.Name" class="form-control form-control-lg border-0"/>

<table class="table mt-2">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Deck Amount</th>
            <th>Requests</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in _dbCards.Values)
        {
            @if (_deckCards.TryGetValue(card.Id, out var inDeck)
                && inDeck.Amount > 0)
            {
                <tr>
                    <td class="fw-bold">@card.Name</td>

                    <td>
                        @foreach (var cost in card.GetColorSymbols())
                        {
                            <span class="m-1 ms ms-@cost.ToLower() ms-cost"></span>
                        }
                    </td>

                    <td>@card.SetName</td>

                    <td>@inDeck.Applied.Amount</td>
                    <td>@(inDeck.Request?.Amount ?? 0)</td>

                    <td>
                        <button title="@card.Name Remove"
                                type="button"
                                class="btn btn-outline-secondary border-0 rounded"
                                @onclick="() => RemoveCardFromDeck(card)">
                            Remove Card
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {

    [Parameter]
    public CardUser User { get; set; }

    [Parameter]
    public int DeckId { get; set; } = default;


    private bool _busy;
    private CardDbContext _context;

    private Location _deck;
    private SortedList<string, Card> _dbCards;

    private IDictionary<string, AmountGroup> _deckCards;
    private IDictionary<string, CardAmount> _availables;


    private bool HasNoChanges => !_context.ChangeTracker.HasChanges();


    protected override async Task OnInitializedAsync()
    {
        if (_busy)
        {
            return;
        }

        _busy = true;
        _context = DbFactory.CreateDbContext();

        _dbCards = new SortedList<string, Card>(
            await _context.Cards.ToDictionaryAsync(c => c.Name));

        _availables = await _context.Amounts
            .Where(ca => ca.Location.OwnerId == default)
            // TODO: change return location
            // TODO: group amounts by cards
            // .GroupBy(ca => ca.CardId)
            .ToDictionaryAsync(ca => ca.CardId);

        _busy = false;
    }


    protected override async Task OnParametersSetAsync()
    {
        _deck = await GetOrCreateDeckAsync();

        _deckCards = _deck.Cards
            .GroupBy(ca => ca.CardId)
            .ToDictionary(g => g.Key, InitGroup);

        FixDeckState();
    }


    private async Task<Location> GetOrCreateDeckAsync()
    {
        if (DeckId != default)
        {
            return await _context.Locations
                .Include(l => l.Cards)
                .SingleAsync(l => l.Id == DeckId);
        }

        var userDeckCount = await _context.Locations
            .Where(l => l.Owner == User)
            .CountAsync();

        var newLoc = new Location($"Deck #{userDeckCount + 1}")
        {
            Owner = User
        };

        _context.Attach(newLoc);

        return newLoc;
    }


    private AmountGroup InitGroup(IGrouping<string, CardAmount> grouping)
    {
        if (!grouping.Any())
        {
            throw new System.ArgumentException("Grouping is empty");
        }

        var applied = grouping.SingleOrDefault(ca => !ca.IsRequest);
        var request = grouping.SingleOrDefault(ca => ca.IsRequest);

        if (applied == null)
        {
            applied = new CardAmount
            {
                Card = request.Card,
                Location = request.Location,
                Amount = 0
            };

            _context.Add(applied);
        }

        return new AmountGroup(applied, request);
    }


    private void RemoveDeckAmount(CardAmount removedAmount)
    {
        if (!removedAmount.IsRequest)
        {
            _deckCards.Remove(removedAmount.CardId);
        }
        else if (_deckCards.TryGetValue(removedAmount.CardId, out var removedGroup))
        {
            removedGroup.Request = null;
        }

        _context.Remove(removedAmount);
    }


    public void Dispose()
    {
        _context?.Dispose();
    }


    private void AddCardToDeck(Card card)
    {
        if (!_availables.TryGetValue(card.Id, out var availAmnt))
        {
            Logger.LogError($"card {card.Id} is not a listed avaliable card");
            return;
        }

        if (_deckCards.TryGetValue(card.Id, out var deckAmnt))
        {
            deckAmnt.Applied.Amount += 1;
        }
        else
        {
            var newAmnt = new CardAmount
            {
                Card = card,
                Location = _deck,
                Amount = 1,
            };

            var newGroup = new AmountGroup(newAmnt);

            _deckCards.Add(card.Id, newGroup);
            _context.Add(newAmnt);
        }

        availAmnt.Amount -= 1;

        if (availAmnt.Amount < 0)
        {
            FixOverdraft(card);
        }
    }


    private void RemoveCardFromDeck(Card card)
    {
        if (!_availables.TryGetValue(card.Id, out var availAmnt))
        {
            Logger.LogError($"card {card.Id} does exist in available set");
            return;
        }

        if (!_deckCards.TryGetValue(card.Id, out var deckAmnt))
        {
            Logger.LogError($"card {card.Id} is not in the deck");
            return;
        }

        if (deckAmnt.Request?.Amount > 0)
        {
            deckAmnt.Request.Amount -= 1;
            return;
        }

        if (deckAmnt.Applied.Amount == 0)
        {
            Logger.LogError($"there are no more of {card.Id} to remove");
            return;
        }

        deckAmnt.Applied.Amount -= 1;

        availAmnt.Amount += 1;
    }



    private void FixOverdraft(Card card)
    {
        if (!_availables.TryGetValue(card.Id, out var availAmnt))
        {
            Logger.LogError($"{card.Id} does not exist in available");
            return;
        }

        if (!_deckCards.TryGetValue(card.Id, out var deckGroup))
        {
            Logger.LogInformation($"{card.Id} does not exist in deck");
            return;
        }

        if (availAmnt.Amount < 0)
        {
            if (deckGroup.Request == null)
            {
                deckGroup.Request = new CardAmount
                {
                    Card = deckGroup.Card,
                    Location = deckGroup.Location,
                    IsRequest = true
                };

                _context.Add(deckGroup.Request);
            }

            // transfer overdraft to request
            deckGroup.Applied.Amount += availAmnt.Amount;
            deckGroup.Request.Amount -= availAmnt.Amount;
            availAmnt.Amount = 0;
        }

        else if (availAmnt.Amount > 0 && deckGroup.Request?.Amount > 0)
        {
            int changeAmnt = Math.Min(availAmnt.Amount, deckGroup.Request.Amount);

            deckGroup.Applied.Amount += changeAmnt;
            deckGroup.Request.Amount -= changeAmnt;
            availAmnt.Amount -= changeAmnt;
        }
    }


    private async Task CommitChangesAsync()
    {
        if (_busy)
        {
            return;
        }

        _busy = true;

        PrepareChanges();

        try {
            await _context.SaveChangesAsync();

            Logger.LogInformation($"successfully updated, trying to nav to index, at {NavigationManager.BaseUri}");
            NavigationManager.NavigateTo("Cards/Index"); // TODO: fix nav not working
        }
        catch (DbUpdateConcurrencyException ex)
        {
            await UpdateDeckAsync(ex);
        }
        finally
        {
            await UpdateAvailableAsync();

            FixDeckState();

            _busy = false;
        }
    }


    private void PrepareChanges()
    {
        foreach(var cardAmnt in _deck.Cards.ToList())
        {
            if (cardAmnt.Amount == 0)
            {
                RemoveDeckAmount(cardAmnt);
            }
            else if (_context.Entry(cardAmnt).State == EntityState.Deleted)
            {
                // was changed since it was last removed
                _context.Entry(cardAmnt).State = EntityState.Modified;
            }
        }

        var deckEntry = _context.Entry(_deck);

        if (deckEntry.State == EntityState.Unchanged)
        {
            deckEntry.State = EntityState.Modified;
        }
    }


    private void FixDeckState()
    {
        foreach (var cardGroup in _deckCards.Values)
        {
            FixOverdraft(cardGroup.Card);
        }
    }


    private async Task UpdateDeckAsync(DbUpdateConcurrencyException ex)
    {
        if (HasNoDeckConflicts(ex))
        {
            return;
        }

        var dbDeckCards = await _context.Amounts
            .Where(ca => ca.LocationId == _deck.Id)
            .AsNoTracking()
            .ToListAsync();

        MergeDeckRemoves(dbDeckCards);

        foreach (var dbCard in dbDeckCards)
        {
            MergeDeckCardConflict(dbCard);
        }

        foreach(var cardGroup in dbDeckCards.GroupBy(ca => ca.CardId))
        {
            await TrackNewCardAsync(cardGroup);
        }

        await _context.MatchToken(_deck);
    }


    private bool HasNoDeckConflicts(DbUpdateConcurrencyException ex)
    {
        var deckConflict = ex.Entries<Location>()
            .SingleOrDefault();

        if (deckConflict != null && deckConflict.Entity.Id == _deck.Id)
        {
            return false;
        }

        var conflictsInDeck = ex.Entries<CardAmount>()
            .Select(ca => ca.Entity.CardId)
            .Intersect(_deckCards.Keys);

        return !conflictsInDeck.Any();
    }


    private void MergeDeckRemoves(IEnumerable<CardAmount> dbDeckCards)
    {
        var dbCardIds = dbDeckCards
            .Select(ca => ca.CardId)
            .Distinct();

        var removedCards = _deckCards.Keys
            .Except(dbCardIds)
            .SelectMany(id => _deckCards[id]);

        foreach(var removedCard in removedCards)
        {
            if (_context.Entry(removedCard).State == EntityState.Unchanged)
            {
                RemoveDeckAmount(removedCard);
            }
        }
    }


    private void MergeDeckCardConflict(CardAmount dbDeckCard)
    {
        AmountGroup localDeckGroup;

        if (!_deckCards.TryGetValue(dbDeckCard.CardId, out localDeckGroup))
        {
            return;
        }

        var localDeckCard = dbDeckCard.IsRequest
            ? localDeckGroup.Request
            : localDeckGroup.Applied;

        if (localDeckCard == null)
        {
            dbDeckCard.Card = localDeckGroup.Card;
            dbDeckCard.Location = localDeckGroup.Location;

            // token also is matched
            localDeckGroup.Request = dbDeckCard;
            _context.Attach(dbDeckCard);

            return;
        }

        var currEntry = _context.Entry(localDeckCard);

        if (currEntry.State != EntityState.Unchanged)
        {
            // overriding conflict amount, so transferring 
            // back cancelled amount to available
            var lastReadAmnt = currEntry.Property(ca => ca.Amount).OriginalValue;
            var dbAmntChange = dbDeckCard.Amount - lastReadAmnt;

            var availEntry = _context
                .Entry(_availables[dbDeckCard.CardId])
                .Property(ca => ca.Amount);

            availEntry.OriginalValue -= dbAmntChange;
        }
        else
        {
            localDeckCard.Amount = dbDeckCard.Amount;
        }

        _context.MatchToken(localDeckCard, dbDeckCard);
    }


    private async Task TrackNewCardAsync(IGrouping<string, CardAmount> cardGroup)
    {
        var cardId = cardGroup.Key;

        if (_deckCards.ContainsKey(cardId))
        {
            return;
        }

        var card = await _context.Cards.FindAsync(cardId);

        foreach (var amount in cardGroup)
        {
            // ensure reference in set to tracked entity
            amount.Card = card;
            amount.Location = _deck;
        }

        var amntGroup = InitGroup(cardGroup);

        if (_context.Entry(amntGroup.Applied).State == EntityState.Detached)
        {
            _context.Attach(amntGroup.Applied);
        }

        if (amntGroup.Request != null)
        {
            _context.Attach(amntGroup.Request);
        }

        _deckCards.Add(cardId, amntGroup);
    }



    private async Task UpdateAvailableAsync()
    {
        var updatedAvails = await _context.Amounts
            .Where(ca => ca.Location.OwnerId == default)
            // TODO: change return location
            // TODO: group amounts by cards
            // .GroupBy(ca => ca.CardId)
            .AsNoTracking()
            .ToListAsync();

        foreach(var dbAvail in updatedAvails)
        {
            dbAvail.Card = await _context.Cards.FindAsync(dbAvail.CardId);

            if (!_dbCards.ContainsKey(dbAvail.Card.Name))
            {
                _dbCards.Add(dbAvail.Card.Name, dbAvail.Card);
            }

            AddOrMergeAvailable(dbAvail);
        }
    }


    private void AddOrMergeAvailable(CardAmount dbAvailable)
    {
        if (!_availables.TryGetValue(dbAvailable.CardId, out var localAvailable))
        {
            _availables.Add(dbAvailable.CardId, dbAvailable);
            _context.Attach(dbAvailable);
        }
        else
        {
            var localAmnt = _context.Entry(localAvailable).Property(ca => ca.Amount);
            var localAvailTaken = localAmnt.CurrentValue - localAmnt.OriginalValue;

            localAvailable.Amount = dbAvailable.Amount + localAvailTaken;
            _context.MatchToken(localAvailable, dbAvailable);
        }
    }


}