@using System.Linq
@using Microsoft.AspNetCore.WebUtilities

@namespace MTGViewer.Components

@inject IDbContextFactory<MTGCardContext> DbFactory


<h1>Card Collection</h1>

<a class="btn btn-secondary" href="Cards/Create">Add Card</a>

@* <div class="input-group my-3">
    <span class="input-group-text">Name:</span> *@
<input class="formcontrol" placeholder="Name" @onchange="SearchName" />
@* </div> *@

<div class="btn-group" role="group" aria-label="Color Buttons">
    @foreach (var color in Data.Color.COLORS)
    {
        var active = colorFilter.Contains(color.Key) ? "active" : "";

        <button title="@color.Key Filter"
                type="button"
                class="btn btn-outline-secondary border-0 rounded @active"
                @onclick="() => FilterColor(color.Key)">
            <span class="ms ms-@color.Value ms-cost"> </span>
        </button>
    }
</div>

<button class="btn btn-secondary" @onclick="FetchCardsAsync">Refresh</button>

<table class="table">
    <thead>
        <tr>
            <th>Card Name</th>
            <th>Mana Cost</th>
            <th>Set</th>
            <th>Rarity</th>
            <th>Total Amount</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in viewCards)
        {
            <tr>
                <td class="fw-bold">@card.Name</td>

                <td>
                    @foreach (var cost in card.GetColorSymbols())
                    {
                        <span class="m-1 ms ms-@cost.ToLower() ms-cost"></span>
                    }
                </td>

                <td>@card.SetName</td>
                <td>@card.Rarity</td>
                <td>@card.Amounts.Select(ca => ca.Amount).Sum()</td>

                <td>
                    <a href="@Details(card.Id)">Details</a> |
                    @if (IsSignedIn)
                    {
                        @*<a href="@Edit(card.Id)">Edit</a> |*@
                        <a href="@Delete(card.Id)">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code {

    [Parameter]
    public bool IsSignedIn { get; set; } = false;

    private IEnumerable<Data.Card> dbCards;
    private IEnumerable<Data.Card> viewCards;

    private string searchName;
    private readonly ISet<string> colorFilter = new HashSet<string>();


    protected override async Task OnInitializedAsync()
    {
        await FetchCardsAsync();
    }

    private async Task FetchCardsAsync()
    {
        using var context = DbFactory.CreateDbContext();

        dbCards = await context.Cards
            .Include(c => c.Colors)
            .Include(c => c.Amounts)
            .ThenInclude(a => a.Location)
            .OrderBy(c => c.Name)
            .AsNoTracking()
            .ToListAsync();

        viewCards = dbCards;
    }


    private void ApplyFilters()
    {
        var query = dbCards;

        if (!string.IsNullOrWhiteSpace(searchName))
        {
            query = query
                .Where(c => c.Name.ToLower().Contains(searchName));
        }

        if (colorFilter.Any())
        {
            query = query
                .Where(card =>
                    colorFilter.Overlaps(
                        card.Colors.Select(color => color.Name.ToLower())));
        }

        viewCards = query.ToList();
    }

    private void FilterColor(string color)
    {
        if (colorFilter.Contains(color))
        {
            colorFilter.Remove(color);
        }
        else
        {
            colorFilter.Add(color);
        }

        ApplyFilters();
    }

    private void SearchName(ChangeEventArgs eventArgs)
    {
        searchName = eventArgs.Value?.ToString();
        ApplyFilters();
    }


    private string Edit(string id) => CardRoute("Edit", id);
    private string Details(string id) => CardRoute("Details", id);
    private string Delete(string id) => CardRoute("Delete", id);


    private string CardRoute(string operation, string id) =>
        QueryHelpers.AddQueryString($"Cards/{operation}", "id", id);

}